
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00003fa4  00004038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800308  00800308  00004140  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003ca  00000000  00000000  00004160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fe8  00000000  00000000  0000452a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e1  00000000  00000000  00005512  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000169d  00000000  00000000  000056f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00006d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041d  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_5>
      18:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_6>
      1c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_7>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ea       	ldi	r30, 0xA4	; 164
      fc:	ff e3       	ldi	r31, 0x3F	; 63
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 32       	cpi	r26, 0x24	; 36
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <main>
     122:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 17 03 	sts	0x0317, r25
    12ec:	80 93 16 03 	sts	0x0316, r24
		lcd_wr_char(million);
    12f0:	80 91 16 03 	lds	r24, 0x0316
    12f4:	90 91 17 03 	lds	r25, 0x0317
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 19 03 	sts	0x0319, r25
    1324:	80 93 18 03 	sts	0x0318, r24
		thousand = temp%10 + 48;
    1328:	80 91 18 03 	lds	r24, 0x0318
    132c:	90 91 19 03 	lds	r25, 0x0319
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 23 03 	sts	0x0323, r25
    1340:	80 93 22 03 	sts	0x0322, r24
		lcd_wr_char(thousand);
    1344:	80 91 22 03 	lds	r24, 0x0322
    1348:	90 91 23 03 	lds	r25, 0x0323
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 19 03 	sts	0x0319, r25
    1378:	80 93 18 03 	sts	0x0318, r24
		hundred = temp%10 + 48;
    137c:	80 91 18 03 	lds	r24, 0x0318
    1380:	90 91 19 03 	lds	r25, 0x0319
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 1f 03 	sts	0x031F, r25
    1394:	80 93 1e 03 	sts	0x031E, r24
		lcd_wr_char(hundred);
    1398:	80 91 1e 03 	lds	r24, 0x031E
    139c:	90 91 1f 03 	lds	r25, 0x031F
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 19 03 	sts	0x0319, r25
    13cc:	80 93 18 03 	sts	0x0318, r24
		tens = temp%10 + 48;
    13d0:	80 91 18 03 	lds	r24, 0x0318
    13d4:	90 91 19 03 	lds	r25, 0x0319
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 1d 03 	sts	0x031D, r25
    13e8:	80 93 1c 03 	sts	0x031C, r24
		lcd_wr_char(tens);
    13ec:	80 91 1c 03 	lds	r24, 0x031C
    13f0:	90 91 1d 03 	lds	r25, 0x031D
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 21 03 	sts	0x0321, r25
    1420:	80 93 20 03 	sts	0x0320, r24
		lcd_wr_char(unit);
    1424:	80 91 20 03 	lds	r24, 0x0320
    1428:	90 91 21 03 	lds	r25, 0x0321
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <motion_pin_config>:

unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 /*DDRA = DDRA | 0x0F;
 PORTA = PORTA & 0xF0;
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.*/

 DDRA = DDRA | 0xCF;   //Motion control pins set as output
    145a:	a1 e2       	ldi	r26, 0x21	; 33
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e1 e2       	ldi	r30, 0x21	; 33
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 6c       	ori	r24, 0xCF	; 207
    1466:	8c 93       	st	X, r24
 PORTA = PORTA & 0x30; //Inital value of the motion control pins set to 0
    1468:	a2 e2       	ldi	r26, 0x22	; 34
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 e2       	ldi	r30, 0x22	; 34
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 73       	andi	r24, 0x30	; 48
    1474:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1476:	aa e0       	ldi	r26, 0x0A	; 10
    1478:	b1 e0       	ldi	r27, 0x01	; 1
    147a:	ea e0       	ldi	r30, 0x0A	; 10
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	80 81       	ld	r24, Z
    1480:	88 61       	ori	r24, 0x18	; 24
    1482:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //Setting PL3 and PL4 pins as logic 1
    1484:	ab e0       	ldi	r26, 0x0B	; 11
    1486:	b1 e0       	ldi	r27, 0x01	; 1
    1488:	eb e0       	ldi	r30, 0x0B	; 11
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	80 81       	ld	r24, Z
    148e:	88 61       	ori	r24, 0x18	; 24
    1490:	8c 93       	st	X, r24
 DDRE = DDRE | 0x08;   //Setting PE3 pin as output for PWM generation
    1492:	ad e2       	ldi	r26, 0x2D	; 45
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ed e2       	ldi	r30, 0x2D	; 45
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	88 60       	ori	r24, 0x08	; 8
    149e:	8c 93       	st	X, r24
 PORTE = PORTE | 0x08; //Setting PE3 pin as logic 1
    14a0:	ae e2       	ldi	r26, 0x2E	; 46
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ee e2       	ldi	r30, 0x2E	; 46
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	88 60       	ori	r24, 0x08	; 8
    14ac:	8c 93       	st	X, r24
}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <servo1_pin_config>:
}	

*/
//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    14bc:	a4 e2       	ldi	r26, 0x24	; 36
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e4 e2       	ldi	r30, 0x24	; 36
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	80 62       	ori	r24, 0x20	; 32
    14c8:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    14ca:	a5 e2       	ldi	r26, 0x25	; 37
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e2       	ldi	r30, 0x25	; 37
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	80 62       	ori	r24, 0x20	; 32
    14d6:	8c 93       	st	X, r24
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    14e6:	ad e2       	ldi	r26, 0x2D	; 45
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ed e2       	ldi	r30, 0x2D	; 45
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7e       	andi	r24, 0xEF	; 239
    14f2:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    14f4:	ae e2       	ldi	r26, 0x2E	; 46
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ee e2       	ldi	r30, 0x2E	; 46
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 61       	ori	r24, 0x10	; 16
    1500:	8c 93       	st	X, r24
}
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1510:	ad e2       	ldi	r26, 0x2D	; 45
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ed e2       	ldi	r30, 0x2D	; 45
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 7d       	andi	r24, 0xDF	; 223
    151c:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    151e:	ae e2       	ldi	r26, 0x2E	; 46
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	ee e2       	ldi	r30, 0x2E	; 46
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	80 62       	ori	r24, 0x20	; 32
    152a:	8c 93       	st	X, r24
}
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <ext_encoder_pin_config>:


void ext_encoder_pin_config (void)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xBF;  //Set the direction of the PORTE 6 pin as input
    153a:	ad e2       	ldi	r26, 0x2D	; 45
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ed e2       	ldi	r30, 0x2D	; 45
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8f 7b       	andi	r24, 0xBF	; 191
    1546:	8c 93       	st	X, r24
 PORTE = PORTE | 0x40; //Enable internal pull-up for PORTE 6 pin
    1548:	ae e2       	ldi	r26, 0x2E	; 46
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ee e2       	ldi	r30, 0x2E	; 46
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	80 64       	ori	r24, 0x40	; 64
    1554:	8c 93       	st	X, r24
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <port_init>:
}
*/

//Function to initialize ports
void port_init()
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config();
    1564:	0e 94 29 0a 	call	0x1452	; 0x1452 <motion_pin_config>
 servo1_pin_config();
    1568:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <servo1_pin_config>
 left_encoder_pin_config(); //left encoder pin config
    156c:	0e 94 6f 0a 	call	0x14de	; 0x14de <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config	
    1570:	0e 94 84 0a 	call	0x1508	; 0x1508 <right_encoder_pin_config>
 ext_encoder_pin_config();
    1574:	0e 94 99 0a 	call	0x1532	; 0x1532 <ext_encoder_pin_config>
 //lcd_port_config();
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <timer5_init>:
// Timer 5 initialized in PWM mode for velocity controlof internal dc motors
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1586:	e1 e2       	ldi	r30, 0x21	; 33
    1588:	f1 e0       	ldi	r31, 0x01	; 1
    158a:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    158c:	e5 e2       	ldi	r30, 0x25	; 37
    158e:	f1 e0       	ldi	r31, 0x01	; 1
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1594:	e4 e2       	ldi	r30, 0x24	; 36
    1596:	f1 e0       	ldi	r31, 0x01	; 1
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    159c:	e9 e2       	ldi	r30, 0x29	; 41
    159e:	f1 e0       	ldi	r31, 0x01	; 1
    15a0:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    15a2:	e8 e2       	ldi	r30, 0x28	; 40
    15a4:	f1 e0       	ldi	r31, 0x01	; 1
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    15aa:	eb e2       	ldi	r30, 0x2B	; 43
    15ac:	f1 e0       	ldi	r31, 0x01	; 1
    15ae:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    15b0:	ea e2       	ldi	r30, 0x2A	; 42
    15b2:	f1 e0       	ldi	r31, 0x01	; 1
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    15b8:	ed e2       	ldi	r30, 0x2D	; 45
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    15be:	ec e2       	ldi	r30, 0x2C	; 44
    15c0:	f1 e0       	ldi	r31, 0x01	; 1
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    15c6:	e0 e2       	ldi	r30, 0x20	; 32
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	89 ea       	ldi	r24, 0xA9	; 169
    15cc:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    15ce:	e1 e2       	ldi	r30, 0x21	; 33
    15d0:	f1 e0       	ldi	r31, 0x01	; 1
    15d2:	8b e0       	ldi	r24, 0x0B	; 11
    15d4:	80 83       	st	Z, r24
}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <timer3_init>:
// Timer 3 initialized in PWM mode for velocity control of External dc motor
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:900Hz
void timer3_init()
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	TCCR3B = 0x00;	//Stop
    15e4:	e1 e9       	ldi	r30, 0x91	; 145
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	10 82       	st	Z, r1
	TCNT3H = 0xFF;	//Counter higher 8-bit value to which OCR3xH value is compared with
    15ea:	e5 e9       	ldi	r30, 0x95	; 149
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	80 83       	st	Z, r24
	TCNT3L = 0x01;	//Counter lower 8-bit value to which OCR3xH value is compared with
    15f2:	e4 e9       	ldi	r30, 0x94	; 148
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 83       	st	Z, r24
	OCR3AH = 0x00;	//Output compare register high value for C2 motor
    15fa:	e9 e9       	ldi	r30, 0x99	; 153
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	10 82       	st	Z, r1
	OCR3AL = 0xFF;	//Output compare register low value for C2 motor
    1600:	e8 e9       	ldi	r30, 0x98	; 152
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	80 83       	st	Z, r24
	OCR3BH = 0x00;	//Not used
    1608:	eb e9       	ldi	r30, 0x9B	; 155
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	10 82       	st	Z, r1
	OCR3BL = 0xFF;	//Not used
    160e:	ea e9       	ldi	r30, 0x9A	; 154
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	80 83       	st	Z, r24
	OCR3CH = 0x00;	//Not used
    1616:	ed e9       	ldi	r30, 0x9D	; 157
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	10 82       	st	Z, r1
	OCR3CL = 0xFF;	//Not used
    161c:	ec e9       	ldi	r30, 0x9C	; 156
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	80 83       	st	Z, r24
	TCCR3A = 0x81;	/*{COM3A1=1, COM3A0=0; COM3B1=0, COM3B0=0; COM3C1=0 COM3C0=0}
    1624:	e0 e9       	ldi	r30, 0x90	; 144
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	81 e8       	ldi	r24, 0x81	; 129
    162a:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM31=0, WGM30=1} Along With WGM32 in TCCR3B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR3B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    162c:	e1 e9       	ldi	r30, 0x91	; 145
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	8b e0       	ldi	r24, 0x0B	; 11
    1632:	80 83       	st	Z, r24
}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode for servo1_motor
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1642:	e1 e8       	ldi	r30, 0x81	; 129
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1648:	e5 e8       	ldi	r30, 0x85	; 133
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8c ef       	ldi	r24, 0xFC	; 252
    164e:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1650:	e4 e8       	ldi	r30, 0x84	; 132
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    1658:	e9 e8       	ldi	r30, 0x89	; 137
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1660:	e8 e8       	ldi	r30, 0x88	; 136
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8f ef       	ldi	r24, 0xFF	; 255
    1666:	80 83       	st	Z, r24
 
 ICR1H  = 0x03;	
    1668:	e7 e8       	ldi	r30, 0x87	; 135
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    1670:	e6 e8       	ldi	r30, 0x86	; 134
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1678:	e0 e8       	ldi	r30, 0x80	; 128
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8b ea       	ldi	r24, 0xAB	; 171
    167e:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1680:	e2 e8       	ldi	r30, 0x82	; 130
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1686:	e1 e8       	ldi	r30, 0x81	; 129
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8c e0       	ldi	r24, 0x0C	; 12
    168c:	80 83       	st	Z, r24
}
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <left_position_encoder_interrupt_init>:




void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    169c:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    169e:	aa e6       	ldi	r26, 0x6A	; 106
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	ea e6       	ldi	r30, 0x6A	; 106
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	82 60       	ori	r24, 0x02	; 2
    16aa:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    16ac:	ad e3       	ldi	r26, 0x3D	; 61
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ed e3       	ldi	r30, 0x3D	; 61
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	80 61       	ori	r24, 0x10	; 16
    16b8:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    16ba:	78 94       	sei
}
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    16ca:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    16cc:	aa e6       	ldi	r26, 0x6A	; 106
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ea e6       	ldi	r30, 0x6A	; 106
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	88 60       	ori	r24, 0x08	; 8
    16d8:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    16da:	ad e3       	ldi	r26, 0x3D	; 61
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ed e3       	ldi	r30, 0x3D	; 61
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    16e8:	78 94       	sei
}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <ext_position_encoder_interrupt_init>:

void ext_position_encoder_interrupt_init (void) //Interrupt 6 enable
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    16f8:	f8 94       	cli
 EICRB = EICRB | 0x20; // INT6 is set to trigger with falling edge
    16fa:	aa e6       	ldi	r26, 0x6A	; 106
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ea e6       	ldi	r30, 0x6A	; 106
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 62       	ori	r24, 0x20	; 32
    1706:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x40; // Enable Interrupt INT6 for right position encoder
    1708:	ad e3       	ldi	r26, 0x3D	; 61
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ed e3       	ldi	r30, 0x3D	; 61
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 64       	ori	r24, 0x40	; 64
    1714:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    1716:	78 94       	sei
}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <init_devices>:

//Function to initialize all the devices
void init_devices()
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1726:	f8 94       	cli
 port_init();  //Initializes all the ports
    1728:	0e 94 ae 0a 	call	0x155c	; 0x155c <port_init>
 timer5_init();
    172c:	0e 94 bf 0a 	call	0x157e	; 0x157e <timer5_init>
 timer3_init();
    1730:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <timer3_init>
 timer1_init();
    1734:	0e 94 1d 0b 	call	0x163a	; 0x163a <timer1_init>
 left_position_encoder_interrupt_init();
    1738:	0e 94 4a 0b 	call	0x1694	; 0x1694 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    173c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <right_position_encoder_interrupt_init>
 ext_position_encoder_interrupt_init ();
    1740:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <ext_position_encoder_interrupt_init>
 sei();   // Enables the global interrupt 
    1744:	78 94       	sei
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <velocity>:



// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	0f 92       	push	r0
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    175c:	e8 e2       	ldi	r30, 0x28	; 40
    175e:	f1 e0       	ldi	r31, 0x01	; 1
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1764:	ea e2       	ldi	r30, 0x2A	; 42
    1766:	f1 e0       	ldi	r31, 0x01	; 1
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 83       	st	Z, r24


}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <__vector_6>:



//ISR for right position encoder
ISR(INT5_vect)  
{
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    1790:	80 91 0c 03 	lds	r24, 0x030C
    1794:	90 91 0d 03 	lds	r25, 0x030D
    1798:	a0 91 0e 03 	lds	r26, 0x030E
    179c:	b0 91 0f 03 	lds	r27, 0x030F
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	a1 1d       	adc	r26, r1
    17a4:	b1 1d       	adc	r27, r1
    17a6:	80 93 0c 03 	sts	0x030C, r24
    17aa:	90 93 0d 03 	sts	0x030D, r25
    17ae:	a0 93 0e 03 	sts	0x030E, r26
    17b2:	b0 93 0f 03 	sts	0x030F, r27
}
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	bf 91       	pop	r27
    17bc:	af 91       	pop	r26
    17be:	9f 91       	pop	r25
    17c0:	8f 91       	pop	r24
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	0f 92       	push	r0
    17d4:	11 24       	eor	r1, r1
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    17e6:	80 91 08 03 	lds	r24, 0x0308
    17ea:	90 91 09 03 	lds	r25, 0x0309
    17ee:	a0 91 0a 03 	lds	r26, 0x030A
    17f2:	b0 91 0b 03 	lds	r27, 0x030B
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	a1 1d       	adc	r26, r1
    17fa:	b1 1d       	adc	r27, r1
    17fc:	80 93 08 03 	sts	0x0308, r24
    1800:	90 93 09 03 	sts	0x0309, r25
    1804:	a0 93 0a 03 	sts	0x030A, r26
    1808:	b0 93 0b 03 	sts	0x030B, r27
}
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	bf 91       	pop	r27
    1812:	af 91       	pop	r26
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <__vector_7>:

ISR(INT6_vect)
{
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	af 93       	push	r26
    1832:	bf 93       	push	r27
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
 ShaftCountext++;  //increment left shaft position count
    183c:	80 91 10 03 	lds	r24, 0x0310
    1840:	90 91 11 03 	lds	r25, 0x0311
    1844:	a0 91 12 03 	lds	r26, 0x0312
    1848:	b0 91 13 03 	lds	r27, 0x0313
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	a1 1d       	adc	r26, r1
    1850:	b1 1d       	adc	r27, r1
    1852:	80 93 10 03 	sts	0x0310, r24
    1856:	90 93 11 03 	sts	0x0311, r25
    185a:	a0 93 12 03 	sts	0x0312, r26
    185e:	b0 93 13 03 	sts	0x0313, r27
}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0f 90       	pop	r0
    1874:	1f 90       	pop	r1
    1876:	18 95       	reti

00001878 <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	0f 92       	push	r0
    187e:	0f 92       	push	r0
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    1886:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0xCF; 		// removing upper nibbel for the protection
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	8f 7c       	andi	r24, 0xCF	; 207
    188c:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    188e:	e2 e2       	ldi	r30, 0x22	; 34
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0x30; 		// making lower direction nibbel to 0
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	80 73       	andi	r24, 0x30	; 48
    189a:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    189c:	99 81       	ldd	r25, Y+1	; 0x01
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	89 2b       	or	r24, r25
    18a2:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    18a4:	e2 e2       	ldi	r30, 0x22	; 34
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	80 83       	st	Z, r24
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <forward>:

void forward (void) //both wheels forward
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
    18be:	86 e0       	ldi	r24, 0x06	; 6
    18c0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <motion_set>
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <back>:

 void back (void) //both wheels backward
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    18d2:	89 e0       	ldi	r24, 0x09	; 9
    18d4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <motion_set>
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    18e6:	85 e0       	ldi	r24, 0x05	; 5
    18e8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <motion_set>
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    18fa:	8a e0       	ldi	r24, 0x0A	; 10
    18fc:	0e 94 3c 0c 	call	0x1878	; 0x1878 <motion_set>
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <stop>:

void stop (void)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0e 94 3c 0c 	call	0x1878	; 0x1878 <motion_set>
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	2c 97       	sbiw	r28, 0x0c	; 12
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	9a 87       	std	Y+10, r25	; 0x0a
    1930:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	af 83       	std	Y+7, r26	; 0x07
    1940:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1942:	19 82       	std	Y+1, r1	; 0x01
    1944:	1a 82       	std	Y+2, r1	; 0x02
    1946:	1b 82       	std	Y+3, r1	; 0x03
    1948:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	cc 01       	movw	r24, r24
    1950:	a0 e0       	ldi	r26, 0x00	; 0
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <__floatunsisf>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	28 e4       	ldi	r18, 0x48	; 72
    1966:	31 ee       	ldi	r19, 0xE1	; 225
    1968:	42 e8       	ldi	r20, 0x82	; 130
    196a:	50 e4       	ldi	r21, 0x40	; 64
    196c:	0e 94 87 1b 	call	0x370e	; 0x370e <__divsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	af 83       	std	Y+7, r26	; 0x07
    197a:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    197c:	6d 81       	ldd	r22, Y+5	; 0x05
    197e:	7e 81       	ldd	r23, Y+6	; 0x06
    1980:	8f 81       	ldd	r24, Y+7	; 0x07
    1982:	98 85       	ldd	r25, Y+8	; 0x08
    1984:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	cc 01       	movw	r24, r24
    198e:	a0 e0       	ldi	r26, 0x00	; 0
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	ab 83       	std	Y+3, r26	; 0x03
    1998:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
    199a:	10 92 0c 03 	sts	0x030C, r1
    199e:	10 92 0d 03 	sts	0x030D, r1
    19a2:	10 92 0e 03 	sts	0x030E, r1
    19a6:	10 92 0f 03 	sts	0x030F, r1
 ShaftCountLeft = 0; 
    19aa:	10 92 08 03 	sts	0x0308, r1
    19ae:	10 92 09 03 	sts	0x0309, r1
    19b2:	10 92 0a 03 	sts	0x030A, r1
    19b6:	10 92 0b 03 	sts	0x030B, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    19ba:	20 91 0c 03 	lds	r18, 0x030C
    19be:	30 91 0d 03 	lds	r19, 0x030D
    19c2:	40 91 0e 03 	lds	r20, 0x030E
    19c6:	50 91 0f 03 	lds	r21, 0x030F
    19ca:	1c 86       	std	Y+12, r1	; 0x0c
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	ab 81       	ldd	r26, Y+3	; 0x03
    19d2:	bc 81       	ldd	r27, Y+4	; 0x04
    19d4:	28 17       	cp	r18, r24
    19d6:	39 07       	cpc	r19, r25
    19d8:	4a 07       	cpc	r20, r26
    19da:	5b 07       	cpc	r21, r27
    19dc:	10 f0       	brcs	.+4      	; 0x19e2 <angle_rotate+0xc8>
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	8c 87       	std	Y+12, r24	; 0x0c
    19e2:	20 91 08 03 	lds	r18, 0x0308
    19e6:	30 91 09 03 	lds	r19, 0x0309
    19ea:	40 91 0a 03 	lds	r20, 0x030A
    19ee:	50 91 0b 03 	lds	r21, 0x030B
    19f2:	1b 86       	std	Y+11, r1	; 0x0b
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	ab 81       	ldd	r26, Y+3	; 0x03
    19fa:	bc 81       	ldd	r27, Y+4	; 0x04
    19fc:	28 17       	cp	r18, r24
    19fe:	39 07       	cpc	r19, r25
    1a00:	4a 07       	cpc	r20, r26
    1a02:	5b 07       	cpc	r21, r27
    1a04:	10 f0       	brcs	.+4      	; 0x1a0a <angle_rotate+0xf0>
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	9b 87       	std	Y+11, r25	; 0x0b
    1a0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0e:	89 2b       	or	r24, r25
    1a10:	88 23       	and	r24, r24
    1a12:	99 f2       	breq	.-90     	; 0x19ba <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop robot
    1a14:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
}
    1a18:	2c 96       	adiw	r28, 0x0c	; 12
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	2a 97       	sbiw	r28, 0x0a	; 10
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	9a 87       	std	Y+10, r25	; 0x0a
    1a40:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	af 83       	std	Y+7, r26	; 0x07
    1a50:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1a52:	19 82       	std	Y+1, r1	; 0x01
    1a54:	1a 82       	std	Y+2, r1	; 0x02
    1a56:	1b 82       	std	Y+3, r1	; 0x03
    1a58:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	cc 01       	movw	r24, r24
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <__floatunsisf>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	25 ee       	ldi	r18, 0xE5	; 229
    1a76:	30 ed       	ldi	r19, 0xD0	; 208
    1a78:	4a ea       	ldi	r20, 0xAA	; 170
    1a7a:	50 e4       	ldi	r21, 0x40	; 64
    1a7c:	0e 94 87 1b 	call	0x370e	; 0x370e <__divsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	af 83       	std	Y+7, r26	; 0x07
    1a8a:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1a8c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a8e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a90:	8f 81       	ldd	r24, Y+7	; 0x07
    1a92:	98 85       	ldd	r25, Y+8	; 0x08
    1a94:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	ab 83       	std	Y+3, r26	; 0x03
    1aa2:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
    1aa4:	10 92 0c 03 	sts	0x030C, r1
    1aa8:	10 92 0d 03 	sts	0x030D, r1
    1aac:	10 92 0e 03 	sts	0x030E, r1
    1ab0:	10 92 0f 03 	sts	0x030F, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
    1ab4:	20 91 0c 03 	lds	r18, 0x030C
    1ab8:	30 91 0d 03 	lds	r19, 0x030D
    1abc:	40 91 0e 03 	lds	r20, 0x030E
    1ac0:	50 91 0f 03 	lds	r21, 0x030F
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	ab 81       	ldd	r26, Y+3	; 0x03
    1aca:	bc 81       	ldd	r27, Y+4	; 0x04
    1acc:	82 17       	cp	r24, r18
    1ace:	93 07       	cpc	r25, r19
    1ad0:	a4 07       	cpc	r26, r20
    1ad2:	b5 07       	cpc	r27, r21
    1ad4:	78 f7       	brcc	.-34     	; 0x1ab4 <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 stop(); //Stop robot
    1ad6:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
}
    1ada:	2a 96       	adiw	r28, 0x0a	; 10
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	0f 92       	push	r0
    1af2:	0f 92       	push	r0
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
 forward();
    1afc:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <forward>
 linear_distance_mm(DistanceInMM);
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <linear_distance_mm>
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <back_mm>:

 void back_mm(unsigned int DistanceInMM)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	0f 92       	push	r0
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
 back();
    1b22:	0e 94 65 0c 	call	0x18ca	; 0x18ca <back>
 linear_distance_mm(DistanceInMM);
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <linear_distance_mm>
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <left_degrees>:

void left_degrees(unsigned int Degrees) 
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	0f 92       	push	r0
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    1b48:	0e 94 6f 0c 	call	0x18de	; 0x18de <left>
 angle_rotate(Degrees);
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	0e 94 8d 0c 	call	0x191a	; 0x191a <angle_rotate>
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	0f 92       	push	r0
    1b64:	0f 92       	push	r0
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    1b6e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <right>
 angle_rotate(Degrees);
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	0e 94 8d 0c 	call	0x191a	; 0x191a <angle_rotate>
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <forward_ext>:

//code for External_dc_motor


void forward_ext(void) //forward motion for external_dc_motor
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x80);
    1b8c:	80 e8       	ldi	r24, 0x80	; 128
    1b8e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <motion_set>
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <backward_ext>:

void backward_ext(void)//backward motion for external_dc_motor
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x40);
    1ba0:	80 e4       	ldi	r24, 0x40	; 64
    1ba2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <motion_set>
}
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <linear_distance_mm_ext>:

//Function for moving gripper up and down through external_dc_motor

void linear_distance_mm_ext(unsigned int DistanceInMM)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	2a 97       	sbiw	r28, 0x0a	; 10
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	9a 87       	std	Y+10, r25	; 0x0a
    1bc2:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a0 e0       	ldi	r26, 0x00	; 0
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	af 83       	std	Y+7, r26	; 0x07
    1bd2:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1bd4:	19 82       	std	Y+1, r1	; 0x01
    1bd6:	1a 82       	std	Y+2, r1	; 0x02
    1bd8:	1b 82       	std	Y+3, r1	; 0x03
    1bda:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	cc 01       	movw	r24, r24
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <__floatunsisf>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	25 ee       	ldi	r18, 0xE5	; 229
    1bf8:	30 ed       	ldi	r19, 0xD0	; 208
    1bfa:	4a ea       	ldi	r20, 0xAA	; 170
    1bfc:	50 e4       	ldi	r21, 0x40	; 64
    1bfe:	0e 94 87 1b 	call	0x370e	; 0x370e <__divsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	af 83       	std	Y+7, r26	; 0x07
    1c0c:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1c0e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c10:	7e 81       	ldd	r23, Y+6	; 0x06
    1c12:	8f 81       	ldd	r24, Y+7	; 0x07
    1c14:	98 85       	ldd	r25, Y+8	; 0x08
    1c16:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	ab 83       	std	Y+3, r26	; 0x03
    1c24:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountext = 0;
    1c26:	10 92 10 03 	sts	0x0310, r1
    1c2a:	10 92 11 03 	sts	0x0311, r1
    1c2e:	10 92 12 03 	sts	0x0312, r1
    1c32:	10 92 13 03 	sts	0x0313, r1
 while(1)
 {
  if(ShaftCountext > ReqdShaftCountInt)
    1c36:	20 91 10 03 	lds	r18, 0x0310
    1c3a:	30 91 11 03 	lds	r19, 0x0311
    1c3e:	40 91 12 03 	lds	r20, 0x0312
    1c42:	50 91 13 03 	lds	r21, 0x0313
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c4c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c4e:	82 17       	cp	r24, r18
    1c50:	93 07       	cpc	r25, r19
    1c52:	a4 07       	cpc	r26, r20
    1c54:	b5 07       	cpc	r27, r21
    1c56:	78 f7       	brcc	.-34     	; 0x1c36 <linear_distance_mm_ext+0x8a>
  {
  	break;
  }
 } 
 stop(); //Stop gripper movement
    1c58:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
}
    1c5c:	2a 96       	adiw	r28, 0x0a	; 10
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <forward_mm_ext>:


void forward_mm_ext(unsigned int DistanceInMM)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	0f 92       	push	r0
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
 forward_ext();
    1c7e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <forward_ext>
 linear_distance_mm_ext(DistanceInMM);
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <linear_distance_mm_ext>
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <backward_mm_ext>:

void backward_mm_ext(unsigned int DistanceInMM)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	0f 92       	push	r0
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	9a 83       	std	Y+2, r25	; 0x02
    1ca2:	89 83       	std	Y+1, r24	; 0x01
 backward_ext();
    1ca4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <backward_ext>
 linear_distance_mm_ext(DistanceInMM);
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <linear_distance_mm_ext>
}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <servo_1>:



//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)  
{
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <servo_1+0xa>
    1cc4:	0f 92       	push	r0
    1cc6:	0f 92       	push	r0
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e0       	ldi	r26, 0x00	; 0
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	ab 83       	std	Y+3, r26	; 0x03
    1cdc:	bc 83       	std	Y+4, r27	; 0x04
  PositionPanServo = ((float)degrees / 2.25)+21.0;//defines the way the servo motor to be rotating
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a0 e0       	ldi	r26, 0x00	; 0
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <__floatunsisf>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e1       	ldi	r20, 0x10	; 16
    1cfe:	50 e4       	ldi	r21, 0x40	; 64
    1d00:	0e 94 87 1b 	call	0x370e	; 0x370e <__divsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	48 ea       	ldi	r20, 0xA8	; 168
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__addsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	ab 83       	std	Y+3, r26	; 0x03
    1d22:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    1d24:	e9 e8       	ldi	r30, 0x89	; 137
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    1d2a:	08 e8       	ldi	r16, 0x88	; 136
    1d2c:	10 e0       	ldi	r17, 0x00	; 0
    1d2e:	69 81       	ldd	r22, Y+1	; 0x01
    1d30:	7a 81       	ldd	r23, Y+2	; 0x02
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 83       	st	Z, r24
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

00001d56 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. 
//This function can be used to reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    1d5e:	e9 e8       	ldi	r30, 0x89	; 137
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
    1d66:	e8 e8       	ldi	r30, 0x88	; 136
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	8f ef       	ldi	r24, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24
}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <main>:



int main(void)
{
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	c6 5d       	subi	r28, 0xD6	; 214
    1d82:	d0 40       	sbci	r29, 0x00	; 0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
  port_init();
    1d8e:	0e 94 ae 0a 	call	0x155c	; 0x155c <port_init>
  init_devices();
    1d92:	0e 94 8f 0b 	call	0x171e	; 0x171e <init_devices>

//lcd_print(1,1,data,2);

 										//LCD initialization functions
  
int k=240;
    1d96:	fe 01       	movw	r30, r28
    1d98:	eb 52       	subi	r30, 0x2B	; 43
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 ef       	ldi	r24, 0xF0	; 240
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
 int i=0;
    1da4:	fe 01       	movw	r30, r28
    1da6:	ed 52       	subi	r30, 0x2D	; 45
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	11 82       	std	Z+1, r1	; 0x01
    1dac:	10 82       	st	Z, r1
    1dae:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__stack+0xf3b>
 while(i<3)
   {
     
     servo_1(180);//fro opening the gripper
    1db2:	84 eb       	ldi	r24, 0xB4	; 180
    1db4:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <servo_1>
    1db8:	fe 01       	movw	r30, r28
    1dba:	e1 53       	subi	r30, 0x31	; 49
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a8 e4       	ldi	r26, 0x48	; 72
    1dc4:	b3 e4       	ldi	r27, 0x43	; 67
    1dc6:	80 83       	st	Z, r24
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	a2 83       	std	Z+2, r26	; 0x02
    1dcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	8e 01       	movw	r16, r28
    1dd0:	05 53       	subi	r16, 0x35	; 53
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e1 53       	subi	r30, 0x31	; 49
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	26 e6       	ldi	r18, 0x66	; 102
    1de4:	36 e6       	ldi	r19, 0x66	; 102
    1de6:	46 e6       	ldi	r20, 0x66	; 102
    1de8:	55 e4       	ldi	r21, 0x45	; 69
    1dea:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	f8 01       	movw	r30, r16
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e5 53       	subi	r30, 0x35	; 53
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	44 f4       	brge	.+16     	; 0x1e2a <main+0xb6>
		__ticks = 1;
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e7 53       	subi	r30, 0x37	; 55
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
    1e28:	64 c0       	rjmp	.+200    	; 0x1ef2 <main+0x17e>
	else if (__tmp > 65535)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e5 53       	subi	r30, 0x35	; 53
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	0c f0       	brlt	.+2      	; 0x1e4a <main+0xd6>
    1e48:	43 c0       	rjmp	.+134    	; 0x1ed0 <main+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e1 53       	subi	r30, 0x31	; 49
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8e 01       	movw	r16, r28
    1e6a:	07 53       	subi	r16, 0x37	; 55
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	80 83       	st	Z, r24
    1e80:	1f c0       	rjmp	.+62     	; 0x1ec0 <main+0x14c>
    1e82:	fe 01       	movw	r30, r28
    1e84:	e9 53       	subi	r30, 0x39	; 57
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 e7       	ldi	r24, 0x70	; 112
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
    1e90:	fe 01       	movw	r30, r28
    1e92:	e9 53       	subi	r30, 0x39	; 57
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <main+0x126>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e9 53       	subi	r30, 0x39	; 57
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	de 01       	movw	r26, r28
    1eaa:	a7 53       	subi	r26, 0x37	; 55
    1eac:	bf 4f       	sbci	r27, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e7 53       	subi	r30, 0x37	; 55
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	11 96       	adiw	r26, 0x01	; 1
    1ebc:	9c 93       	st	X, r25
    1ebe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e7 53       	subi	r30, 0x37	; 55
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	d1 f6       	brne	.-76     	; 0x1e82 <main+0x10e>
    1ece:	27 c0       	rjmp	.+78     	; 0x1f1e <main+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	07 53       	subi	r16, 0x37	; 55
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e5 53       	subi	r30, 0x35	; 53
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	f8 01       	movw	r30, r16
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	de 01       	movw	r26, r28
    1ef4:	ab 53       	subi	r26, 0x3B	; 59
    1ef6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e7 53       	subi	r30, 0x37	; 55
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	8d 93       	st	X+, r24
    1f04:	9c 93       	st	X, r25
    1f06:	fe 01       	movw	r30, r28
    1f08:	eb 53       	subi	r30, 0x3B	; 59
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <main+0x19c>
    1f14:	fe 01       	movw	r30, r28
    1f16:	eb 53       	subi	r30, 0x3B	; 59
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
	 _delay_ms(200);
	 backward_mm_ext(290);//for releasing the thread as gripper goes down
    1f1e:	82 e2       	ldi	r24, 0x22	; 34
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <backward_mm_ext>
     stop();
    1f26:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ef 53       	subi	r30, 0x3F	; 63
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a6 e9       	ldi	r26, 0x96	; 150
    1f36:	b3 e4       	ldi	r27, 0x43	; 67
    1f38:	80 83       	st	Z, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	a2 83       	std	Z+2, r26	; 0x02
    1f3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	8e 01       	movw	r16, r28
    1f42:	03 54       	subi	r16, 0x43	; 67
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	fe 01       	movw	r30, r28
    1f48:	ef 53       	subi	r30, 0x3F	; 63
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	26 e6       	ldi	r18, 0x66	; 102
    1f56:	36 e6       	ldi	r19, 0x66	; 102
    1f58:	46 e6       	ldi	r20, 0x66	; 102
    1f5a:	55 e4       	ldi	r21, 0x45	; 69
    1f5c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	f8 01       	movw	r30, r16
    1f66:	80 83       	st	Z, r24
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	a2 83       	std	Z+2, r26	; 0x02
    1f6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e3 54       	subi	r30, 0x43	; 67
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	44 f4       	brge	.+16     	; 0x1f9c <main+0x228>
		__ticks = 1;
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e5 54       	subi	r30, 0x45	; 69
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	64 c0       	rjmp	.+200    	; 0x2064 <main+0x2f0>
	else if (__tmp > 65535)
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e3 54       	subi	r30, 0x43	; 67
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	0c f0       	brlt	.+2      	; 0x1fbc <main+0x248>
    1fba:	43 c0       	rjmp	.+134    	; 0x2042 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ef 53       	subi	r30, 0x3F	; 63
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8e 01       	movw	r16, r28
    1fdc:	05 54       	subi	r16, 0x45	; 69
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	1f c0       	rjmp	.+62     	; 0x2032 <main+0x2be>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e7 54       	subi	r30, 0x47	; 71
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 e7       	ldi	r24, 0x70	; 112
    1ffc:	91 e0       	ldi	r25, 0x01	; 1
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	80 83       	st	Z, r24
    2002:	fe 01       	movw	r30, r28
    2004:	e7 54       	subi	r30, 0x47	; 71
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <main+0x298>
    2010:	fe 01       	movw	r30, r28
    2012:	e7 54       	subi	r30, 0x47	; 71
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201a:	de 01       	movw	r26, r28
    201c:	a5 54       	subi	r26, 0x45	; 69
    201e:	bf 4f       	sbci	r27, 0xFF	; 255
    2020:	fe 01       	movw	r30, r28
    2022:	e5 54       	subi	r30, 0x45	; 69
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	9c 93       	st	X, r25
    2030:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2032:	fe 01       	movw	r30, r28
    2034:	e5 54       	subi	r30, 0x45	; 69
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	d1 f6       	brne	.-76     	; 0x1ff4 <main+0x280>
    2040:	27 c0       	rjmp	.+78     	; 0x2090 <main+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	8e 01       	movw	r16, r28
    2044:	05 54       	subi	r16, 0x45	; 69
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	fe 01       	movw	r30, r28
    204a:	e3 54       	subi	r30, 0x43	; 67
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	f8 01       	movw	r30, r16
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	80 83       	st	Z, r24
    2064:	de 01       	movw	r26, r28
    2066:	a9 54       	subi	r26, 0x49	; 73
    2068:	bf 4f       	sbci	r27, 0xFF	; 255
    206a:	fe 01       	movw	r30, r28
    206c:	e5 54       	subi	r30, 0x45	; 69
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	8d 93       	st	X+, r24
    2076:	9c 93       	st	X, r25
    2078:	fe 01       	movw	r30, r28
    207a:	e9 54       	subi	r30, 0x49	; 73
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <main+0x30e>
    2086:	fe 01       	movw	r30, r28
    2088:	e9 54       	subi	r30, 0x49	; 73
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
     _delay_ms(300);
    	

     servo_1(100);//for closing the gripper
    2090:	84 e6       	ldi	r24, 0x64	; 100
    2092:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <servo_1>
    2096:	fe 01       	movw	r30, r28
    2098:	ed 54       	subi	r30, 0x4D	; 77
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a6 e9       	ldi	r26, 0x96	; 150
    20a2:	b3 e4       	ldi	r27, 0x43	; 67
    20a4:	80 83       	st	Z, r24
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	a2 83       	std	Z+2, r26	; 0x02
    20aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	8e 01       	movw	r16, r28
    20ae:	01 55       	subi	r16, 0x51	; 81
    20b0:	1f 4f       	sbci	r17, 0xFF	; 255
    20b2:	fe 01       	movw	r30, r28
    20b4:	ed 54       	subi	r30, 0x4D	; 77
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	26 e6       	ldi	r18, 0x66	; 102
    20c2:	36 e6       	ldi	r19, 0x66	; 102
    20c4:	46 e6       	ldi	r20, 0x66	; 102
    20c6:	55 e4       	ldi	r21, 0x45	; 69
    20c8:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	f8 01       	movw	r30, r16
    20d2:	80 83       	st	Z, r24
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	a2 83       	std	Z+2, r26	; 0x02
    20d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20da:	fe 01       	movw	r30, r28
    20dc:	e1 55       	subi	r30, 0x51	; 81
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	44 f4       	brge	.+16     	; 0x2108 <main+0x394>
		__ticks = 1;
    20f8:	fe 01       	movw	r30, r28
    20fa:	e3 55       	subi	r30, 0x53	; 83
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
    2106:	64 c0       	rjmp	.+200    	; 0x21d0 <main+0x45c>
	else if (__tmp > 65535)
    2108:	fe 01       	movw	r30, r28
    210a:	e1 55       	subi	r30, 0x51	; 81
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	60 81       	ld	r22, Z
    2110:	71 81       	ldd	r23, Z+1	; 0x01
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	0c f0       	brlt	.+2      	; 0x2128 <main+0x3b4>
    2126:	43 c0       	rjmp	.+134    	; 0x21ae <main+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	fe 01       	movw	r30, r28
    212a:	ed 54       	subi	r30, 0x4D	; 77
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	8e 01       	movw	r16, r28
    2148:	03 55       	subi	r16, 0x53	; 83
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	f8 01       	movw	r30, r16
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
    215e:	1f c0       	rjmp	.+62     	; 0x219e <main+0x42a>
    2160:	fe 01       	movw	r30, r28
    2162:	e5 55       	subi	r30, 0x55	; 85
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 e7       	ldi	r24, 0x70	; 112
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
    216e:	fe 01       	movw	r30, r28
    2170:	e5 55       	subi	r30, 0x55	; 85
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <main+0x404>
    217c:	fe 01       	movw	r30, r28
    217e:	e5 55       	subi	r30, 0x55	; 85
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2186:	de 01       	movw	r26, r28
    2188:	a3 55       	subi	r26, 0x53	; 83
    218a:	bf 4f       	sbci	r27, 0xFF	; 255
    218c:	fe 01       	movw	r30, r28
    218e:	e3 55       	subi	r30, 0x53	; 83
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	11 96       	adiw	r26, 0x01	; 1
    219a:	9c 93       	st	X, r25
    219c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	fe 01       	movw	r30, r28
    21a0:	e3 55       	subi	r30, 0x53	; 83
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	d1 f6       	brne	.-76     	; 0x2160 <main+0x3ec>
    21ac:	27 c0       	rjmp	.+78     	; 0x21fc <main+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	8e 01       	movw	r16, r28
    21b0:	03 55       	subi	r16, 0x53	; 83
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	fe 01       	movw	r30, r28
    21b6:	e1 55       	subi	r30, 0x51	; 81
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	f8 01       	movw	r30, r16
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	80 83       	st	Z, r24
    21d0:	de 01       	movw	r26, r28
    21d2:	a7 55       	subi	r26, 0x57	; 87
    21d4:	bf 4f       	sbci	r27, 0xFF	; 255
    21d6:	fe 01       	movw	r30, r28
    21d8:	e3 55       	subi	r30, 0x53	; 83
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	8d 93       	st	X+, r24
    21e2:	9c 93       	st	X, r25
    21e4:	fe 01       	movw	r30, r28
    21e6:	e7 55       	subi	r30, 0x57	; 87
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <main+0x47a>
    21f2:	fe 01       	movw	r30, r28
    21f4:	e7 55       	subi	r30, 0x57	; 87
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	80 83       	st	Z, r24
	 _delay_ms(300);
	 forward_mm_ext(225);//for winding the thread so that gripper comes up
    21fc:	81 ee       	ldi	r24, 0xE1	; 225
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <forward_mm_ext>
    2204:	fe 01       	movw	r30, r28
    2206:	eb 55       	subi	r30, 0x5B	; 91
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a8 e4       	ldi	r26, 0x48	; 72
    2210:	b3 e4       	ldi	r27, 0x43	; 67
    2212:	80 83       	st	Z, r24
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	a2 83       	std	Z+2, r26	; 0x02
    2218:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221a:	8e 01       	movw	r16, r28
    221c:	0f 55       	subi	r16, 0x5F	; 95
    221e:	1f 4f       	sbci	r17, 0xFF	; 255
    2220:	fe 01       	movw	r30, r28
    2222:	eb 55       	subi	r30, 0x5B	; 91
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	60 81       	ld	r22, Z
    2228:	71 81       	ldd	r23, Z+1	; 0x01
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	26 e6       	ldi	r18, 0x66	; 102
    2230:	36 e6       	ldi	r19, 0x66	; 102
    2232:	46 e6       	ldi	r20, 0x66	; 102
    2234:	55 e4       	ldi	r21, 0x45	; 69
    2236:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	80 83       	st	Z, r24
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	a2 83       	std	Z+2, r26	; 0x02
    2246:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2248:	fe 01       	movw	r30, r28
    224a:	ef 55       	subi	r30, 0x5F	; 95
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	60 81       	ld	r22, Z
    2250:	71 81       	ldd	r23, Z+1	; 0x01
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e8       	ldi	r20, 0x80	; 128
    225c:	5f e3       	ldi	r21, 0x3F	; 63
    225e:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    2262:	88 23       	and	r24, r24
    2264:	44 f4       	brge	.+16     	; 0x2276 <__stack+0x77>
		__ticks = 1;
    2266:	fe 01       	movw	r30, r28
    2268:	e1 56       	subi	r30, 0x61	; 97
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
    2274:	64 c0       	rjmp	.+200    	; 0x233e <__stack+0x13f>
	else if (__tmp > 65535)
    2276:	fe 01       	movw	r30, r28
    2278:	ef 55       	subi	r30, 0x5F	; 95
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f ef       	ldi	r19, 0xFF	; 255
    2288:	4f e7       	ldi	r20, 0x7F	; 127
    228a:	57 e4       	ldi	r21, 0x47	; 71
    228c:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    2290:	18 16       	cp	r1, r24
    2292:	0c f0       	brlt	.+2      	; 0x2296 <__stack+0x97>
    2294:	43 c0       	rjmp	.+134    	; 0x231c <__stack+0x11d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	fe 01       	movw	r30, r28
    2298:	eb 55       	subi	r30, 0x5B	; 91
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	60 81       	ld	r22, Z
    229e:	71 81       	ldd	r23, Z+1	; 0x01
    22a0:	82 81       	ldd	r24, Z+2	; 0x02
    22a2:	93 81       	ldd	r25, Z+3	; 0x03
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e2       	ldi	r20, 0x20	; 32
    22aa:	51 e4       	ldi	r21, 0x41	; 65
    22ac:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8e 01       	movw	r16, r28
    22b6:	01 56       	subi	r16, 0x61	; 97
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	f8 01       	movw	r30, r16
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	80 83       	st	Z, r24
    22cc:	1f c0       	rjmp	.+62     	; 0x230c <__stack+0x10d>
    22ce:	fe 01       	movw	r30, r28
    22d0:	e3 56       	subi	r30, 0x63	; 99
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 e7       	ldi	r24, 0x70	; 112
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24
    22dc:	fe 01       	movw	r30, r28
    22de:	e3 56       	subi	r30, 0x63	; 99
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <__stack+0xe7>
    22ea:	fe 01       	movw	r30, r28
    22ec:	e3 56       	subi	r30, 0x63	; 99
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f4:	de 01       	movw	r26, r28
    22f6:	a1 56       	subi	r26, 0x61	; 97
    22f8:	bf 4f       	sbci	r27, 0xFF	; 255
    22fa:	fe 01       	movw	r30, r28
    22fc:	e1 56       	subi	r30, 0x61	; 97
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	11 96       	adiw	r26, 0x01	; 1
    2308:	9c 93       	st	X, r25
    230a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	fe 01       	movw	r30, r28
    230e:	e1 56       	subi	r30, 0x61	; 97
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	d1 f6       	brne	.-76     	; 0x22ce <__stack+0xcf>
    231a:	27 c0       	rjmp	.+78     	; 0x236a <__stack+0x16b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	8e 01       	movw	r16, r28
    231e:	01 56       	subi	r16, 0x61	; 97
    2320:	1f 4f       	sbci	r17, 0xFF	; 255
    2322:	fe 01       	movw	r30, r28
    2324:	ef 55       	subi	r30, 0x5F	; 95
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	f8 01       	movw	r30, r16
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
    233e:	de 01       	movw	r26, r28
    2340:	a5 56       	subi	r26, 0x65	; 101
    2342:	bf 4f       	sbci	r27, 0xFF	; 255
    2344:	fe 01       	movw	r30, r28
    2346:	e1 56       	subi	r30, 0x61	; 97
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 81       	ld	r24, Z
    234c:	91 81       	ldd	r25, Z+1	; 0x01
    234e:	8d 93       	st	X+, r24
    2350:	9c 93       	st	X, r25
    2352:	fe 01       	movw	r30, r28
    2354:	e5 56       	subi	r30, 0x65	; 101
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	80 81       	ld	r24, Z
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <__stack+0x15d>
    2360:	fe 01       	movw	r30, r28
    2362:	e5 56       	subi	r30, 0x65	; 101
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	80 83       	st	Z, r24
	 _delay_ms(200);
	  


	 servo_1_free();//making servo free to rotate
    236a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <servo_1_free>
    236e:	fe 01       	movw	r30, r28
    2370:	e9 56       	subi	r30, 0x69	; 105
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a6 e9       	ldi	r26, 0x96	; 150
    237a:	b3 e4       	ldi	r27, 0x43	; 67
    237c:	80 83       	st	Z, r24
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	a2 83       	std	Z+2, r26	; 0x02
    2382:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2384:	8e 01       	movw	r16, r28
    2386:	0d 56       	subi	r16, 0x6D	; 109
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	fe 01       	movw	r30, r28
    238c:	e9 56       	subi	r30, 0x69	; 105
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	26 e6       	ldi	r18, 0x66	; 102
    239a:	36 e6       	ldi	r19, 0x66	; 102
    239c:	46 e6       	ldi	r20, 0x66	; 102
    239e:	55 e4       	ldi	r21, 0x45	; 69
    23a0:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	f8 01       	movw	r30, r16
    23aa:	80 83       	st	Z, r24
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	a2 83       	std	Z+2, r26	; 0x02
    23b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23b2:	fe 01       	movw	r30, r28
    23b4:	ed 56       	subi	r30, 0x6D	; 109
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	60 81       	ld	r22, Z
    23ba:	71 81       	ldd	r23, Z+1	; 0x01
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	93 81       	ldd	r25, Z+3	; 0x03
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	44 f4       	brge	.+16     	; 0x23e0 <__stack+0x1e1>
		__ticks = 1;
    23d0:	fe 01       	movw	r30, r28
    23d2:	ef 56       	subi	r30, 0x6F	; 111
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24
    23de:	64 c0       	rjmp	.+200    	; 0x24a8 <__stack+0x2a9>
	else if (__tmp > 65535)
    23e0:	fe 01       	movw	r30, r28
    23e2:	ed 56       	subi	r30, 0x6D	; 109
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	0c f0       	brlt	.+2      	; 0x2400 <__stack+0x201>
    23fe:	43 c0       	rjmp	.+134    	; 0x2486 <__stack+0x287>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2400:	fe 01       	movw	r30, r28
    2402:	e9 56       	subi	r30, 0x69	; 105
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8e 01       	movw	r16, r28
    2420:	0f 56       	subi	r16, 0x6F	; 111
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	f8 01       	movw	r30, r16
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	1f c0       	rjmp	.+62     	; 0x2476 <__stack+0x277>
    2438:	fe 01       	movw	r30, r28
    243a:	e1 57       	subi	r30, 0x71	; 113
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 e7       	ldi	r24, 0x70	; 112
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24
    2446:	fe 01       	movw	r30, r28
    2448:	e1 57       	subi	r30, 0x71	; 113
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <__stack+0x251>
    2454:	fe 01       	movw	r30, r28
    2456:	e1 57       	subi	r30, 0x71	; 113
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245e:	de 01       	movw	r26, r28
    2460:	af 56       	subi	r26, 0x6F	; 111
    2462:	bf 4f       	sbci	r27, 0xFF	; 255
    2464:	fe 01       	movw	r30, r28
    2466:	ef 56       	subi	r30, 0x6F	; 111
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	91 81       	ldd	r25, Z+1	; 0x01
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	11 96       	adiw	r26, 0x01	; 1
    2472:	9c 93       	st	X, r25
    2474:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	fe 01       	movw	r30, r28
    2478:	ef 56       	subi	r30, 0x6F	; 111
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 81       	ld	r24, Z
    247e:	91 81       	ldd	r25, Z+1	; 0x01
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	d1 f6       	brne	.-76     	; 0x2438 <__stack+0x239>
    2484:	27 c0       	rjmp	.+78     	; 0x24d4 <__stack+0x2d5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	8e 01       	movw	r16, r28
    2488:	0f 56       	subi	r16, 0x6F	; 111
    248a:	1f 4f       	sbci	r17, 0xFF	; 255
    248c:	fe 01       	movw	r30, r28
    248e:	ed 56       	subi	r30, 0x6D	; 109
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	f8 01       	movw	r30, r16
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24
    24a8:	de 01       	movw	r26, r28
    24aa:	a3 57       	subi	r26, 0x73	; 115
    24ac:	bf 4f       	sbci	r27, 0xFF	; 255
    24ae:	fe 01       	movw	r30, r28
    24b0:	ef 56       	subi	r30, 0x6F	; 111
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	8d 93       	st	X+, r24
    24ba:	9c 93       	st	X, r25
    24bc:	fe 01       	movw	r30, r28
    24be:	e3 57       	subi	r30, 0x73	; 115
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <__stack+0x2c7>
    24ca:	fe 01       	movw	r30, r28
    24cc:	e3 57       	subi	r30, 0x73	; 115
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
     _delay_ms(300);

	 velocity(170,200);
    24d4:	8a ea       	ldi	r24, 0xAA	; 170
    24d6:	68 ec       	ldi	r22, 0xC8	; 200
    24d8:	0e 94 a6 0b 	call	0x174c	; 0x174c <velocity>
     back_mm(k);
    24dc:	fe 01       	movw	r30, r28
    24de:	eb 52       	subi	r30, 0x2B	; 43
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	91 81       	ldd	r25, Z+1	; 0x01
    24e6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <back_mm>
     stop();
    24ea:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
    24ee:	fe 01       	movw	r30, r28
    24f0:	e7 57       	subi	r30, 0x77	; 119
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a6 e9       	ldi	r26, 0x96	; 150
    24fa:	b3 e4       	ldi	r27, 0x43	; 67
    24fc:	80 83       	st	Z, r24
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	a2 83       	std	Z+2, r26	; 0x02
    2502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	8e 01       	movw	r16, r28
    2506:	0b 57       	subi	r16, 0x7B	; 123
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	fe 01       	movw	r30, r28
    250c:	e7 57       	subi	r30, 0x77	; 119
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	26 e6       	ldi	r18, 0x66	; 102
    251a:	36 e6       	ldi	r19, 0x66	; 102
    251c:	46 e6       	ldi	r20, 0x66	; 102
    251e:	55 e4       	ldi	r21, 0x45	; 69
    2520:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	f8 01       	movw	r30, r16
    252a:	80 83       	st	Z, r24
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	a2 83       	std	Z+2, r26	; 0x02
    2530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2532:	fe 01       	movw	r30, r28
    2534:	eb 57       	subi	r30, 0x7B	; 123
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	44 f4       	brge	.+16     	; 0x2560 <__stack+0x361>
		__ticks = 1;
    2550:	fe 01       	movw	r30, r28
    2552:	ed 57       	subi	r30, 0x7D	; 125
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	64 c0       	rjmp	.+200    	; 0x2628 <__stack+0x429>
	else if (__tmp > 65535)
    2560:	fe 01       	movw	r30, r28
    2562:	eb 57       	subi	r30, 0x7B	; 123
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	3f ef       	ldi	r19, 0xFF	; 255
    2572:	4f e7       	ldi	r20, 0x7F	; 127
    2574:	57 e4       	ldi	r21, 0x47	; 71
    2576:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    257a:	18 16       	cp	r1, r24
    257c:	0c f0       	brlt	.+2      	; 0x2580 <__stack+0x381>
    257e:	43 c0       	rjmp	.+134    	; 0x2606 <__stack+0x407>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	fe 01       	movw	r30, r28
    2582:	e7 57       	subi	r30, 0x77	; 119
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 81       	ld	r22, Z
    2588:	71 81       	ldd	r23, Z+1	; 0x01
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	93 81       	ldd	r25, Z+3	; 0x03
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8e 01       	movw	r16, r28
    25a0:	0d 57       	subi	r16, 0x7D	; 125
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	f8 01       	movw	r30, r16
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	1f c0       	rjmp	.+62     	; 0x25f6 <__stack+0x3f7>
    25b8:	fe 01       	movw	r30, r28
    25ba:	ef 57       	subi	r30, 0x7F	; 127
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 e7       	ldi	r24, 0x70	; 112
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	fe 01       	movw	r30, r28
    25c8:	ef 57       	subi	r30, 0x7F	; 127
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <__stack+0x3d1>
    25d4:	fe 01       	movw	r30, r28
    25d6:	ef 57       	subi	r30, 0x7F	; 127
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	de 01       	movw	r26, r28
    25e0:	ad 57       	subi	r26, 0x7D	; 125
    25e2:	bf 4f       	sbci	r27, 0xFF	; 255
    25e4:	fe 01       	movw	r30, r28
    25e6:	ed 57       	subi	r30, 0x7D	; 125
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	11 96       	adiw	r26, 0x01	; 1
    25f2:	9c 93       	st	X, r25
    25f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f6:	fe 01       	movw	r30, r28
    25f8:	ed 57       	subi	r30, 0x7D	; 125
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	d1 f6       	brne	.-76     	; 0x25b8 <__stack+0x3b9>
    2604:	27 c0       	rjmp	.+78     	; 0x2654 <__stack+0x455>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	8e 01       	movw	r16, r28
    2608:	0d 57       	subi	r16, 0x7D	; 125
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	fe 01       	movw	r30, r28
    260e:	eb 57       	subi	r30, 0x7B	; 123
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
    2628:	de 01       	movw	r26, r28
    262a:	a1 58       	subi	r26, 0x81	; 129
    262c:	bf 4f       	sbci	r27, 0xFF	; 255
    262e:	fe 01       	movw	r30, r28
    2630:	ed 57       	subi	r30, 0x7D	; 125
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	8d 93       	st	X+, r24
    263a:	9c 93       	st	X, r25
    263c:	fe 01       	movw	r30, r28
    263e:	e1 58       	subi	r30, 0x81	; 129
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <__stack+0x447>
    264a:	fe 01       	movw	r30, r28
    264c:	e1 58       	subi	r30, 0x81	; 129
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
	  _delay_ms(300);
	     
	 velocity(190,240);
    2654:	8e eb       	ldi	r24, 0xBE	; 190
    2656:	60 ef       	ldi	r22, 0xF0	; 240
    2658:	0e 94 a6 0b 	call	0x174c	; 0x174c <velocity>
	 right_degrees(100);
    265c:	84 e6       	ldi	r24, 0x64	; 100
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <right_degrees>
    2664:	fe 01       	movw	r30, r28
    2666:	e5 58       	subi	r30, 0x85	; 133
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a8 e4       	ldi	r26, 0x48	; 72
    2670:	b3 e4       	ldi	r27, 0x43	; 67
    2672:	80 83       	st	Z, r24
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	a2 83       	std	Z+2, r26	; 0x02
    2678:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	8e 01       	movw	r16, r28
    267c:	09 58       	subi	r16, 0x89	; 137
    267e:	1f 4f       	sbci	r17, 0xFF	; 255
    2680:	fe 01       	movw	r30, r28
    2682:	e5 58       	subi	r30, 0x85	; 133
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	26 e6       	ldi	r18, 0x66	; 102
    2690:	36 e6       	ldi	r19, 0x66	; 102
    2692:	46 e6       	ldi	r20, 0x66	; 102
    2694:	55 e4       	ldi	r21, 0x45	; 69
    2696:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	f8 01       	movw	r30, r16
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a8:	fe 01       	movw	r30, r28
    26aa:	e9 58       	subi	r30, 0x89	; 137
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	44 f4       	brge	.+16     	; 0x26d6 <__stack+0x4d7>
		__ticks = 1;
    26c6:	fe 01       	movw	r30, r28
    26c8:	eb 58       	subi	r30, 0x8B	; 139
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
    26d4:	64 c0       	rjmp	.+200    	; 0x279e <__stack+0x59f>
	else if (__tmp > 65535)
    26d6:	fe 01       	movw	r30, r28
    26d8:	e9 58       	subi	r30, 0x89	; 137
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	0c f0       	brlt	.+2      	; 0x26f6 <__stack+0x4f7>
    26f4:	43 c0       	rjmp	.+134    	; 0x277c <__stack+0x57d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	fe 01       	movw	r30, r28
    26f8:	e5 58       	subi	r30, 0x85	; 133
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e2       	ldi	r20, 0x20	; 32
    270a:	51 e4       	ldi	r21, 0x41	; 65
    270c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8e 01       	movw	r16, r28
    2716:	0b 58       	subi	r16, 0x8B	; 139
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	f8 01       	movw	r30, r16
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
    272c:	1f c0       	rjmp	.+62     	; 0x276c <__stack+0x56d>
    272e:	fe 01       	movw	r30, r28
    2730:	ed 58       	subi	r30, 0x8D	; 141
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 e7       	ldi	r24, 0x70	; 112
    2736:	91 e0       	ldi	r25, 0x01	; 1
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
    273c:	fe 01       	movw	r30, r28
    273e:	ed 58       	subi	r30, 0x8D	; 141
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <__stack+0x547>
    274a:	fe 01       	movw	r30, r28
    274c:	ed 58       	subi	r30, 0x8D	; 141
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	de 01       	movw	r26, r28
    2756:	ab 58       	subi	r26, 0x8B	; 139
    2758:	bf 4f       	sbci	r27, 0xFF	; 255
    275a:	fe 01       	movw	r30, r28
    275c:	eb 58       	subi	r30, 0x8B	; 139
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	11 96       	adiw	r26, 0x01	; 1
    2768:	9c 93       	st	X, r25
    276a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276c:	fe 01       	movw	r30, r28
    276e:	eb 58       	subi	r30, 0x8B	; 139
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	d1 f6       	brne	.-76     	; 0x272e <__stack+0x52f>
    277a:	27 c0       	rjmp	.+78     	; 0x27ca <__stack+0x5cb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	8e 01       	movw	r16, r28
    277e:	0b 58       	subi	r16, 0x8B	; 139
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	fe 01       	movw	r30, r28
    2784:	e9 58       	subi	r30, 0x89	; 137
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	f8 01       	movw	r30, r16
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
    279e:	de 01       	movw	r26, r28
    27a0:	af 58       	subi	r26, 0x8F	; 143
    27a2:	bf 4f       	sbci	r27, 0xFF	; 255
    27a4:	fe 01       	movw	r30, r28
    27a6:	eb 58       	subi	r30, 0x8B	; 139
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	91 81       	ldd	r25, Z+1	; 0x01
    27ae:	8d 93       	st	X+, r24
    27b0:	9c 93       	st	X, r25
    27b2:	fe 01       	movw	r30, r28
    27b4:	ef 58       	subi	r30, 0x8F	; 143
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	80 81       	ld	r24, Z
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <__stack+0x5bd>
    27c0:	fe 01       	movw	r30, r28
    27c2:	ef 58       	subi	r30, 0x8F	; 143
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	80 83       	st	Z, r24
	 _delay_ms(200);
	 stop();
    27ca:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
	    
	 velocity(145,200);
    27ce:	81 e9       	ldi	r24, 0x91	; 145
    27d0:	68 ec       	ldi	r22, 0xC8	; 200
    27d2:	0e 94 a6 0b 	call	0x174c	; 0x174c <velocity>
     forward_mm(400);//for moving robot in x direction
    27d6:	80 e9       	ldi	r24, 0x90	; 144
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	0e 94 76 0d 	call	0x1aec	; 0x1aec <forward_mm>
     stop();
    27de:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 59       	subi	r30, 0x93	; 147
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a6 e9       	ldi	r26, 0x96	; 150
    27ee:	b3 e4       	ldi	r27, 0x43	; 67
    27f0:	80 83       	st	Z, r24
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	a2 83       	std	Z+2, r26	; 0x02
    27f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	8e 01       	movw	r16, r28
    27fa:	07 59       	subi	r16, 0x97	; 151
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	fe 01       	movw	r30, r28
    2800:	e3 59       	subi	r30, 0x93	; 147
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	26 e6       	ldi	r18, 0x66	; 102
    280e:	36 e6       	ldi	r19, 0x66	; 102
    2810:	46 e6       	ldi	r20, 0x66	; 102
    2812:	55 e4       	ldi	r21, 0x45	; 69
    2814:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	f8 01       	movw	r30, r16
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2826:	fe 01       	movw	r30, r28
    2828:	e7 59       	subi	r30, 0x97	; 151
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	44 f4       	brge	.+16     	; 0x2854 <__stack+0x655>
		__ticks = 1;
    2844:	fe 01       	movw	r30, r28
    2846:	e9 59       	subi	r30, 0x99	; 153
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    2852:	64 c0       	rjmp	.+200    	; 0x291c <__stack+0x71d>
	else if (__tmp > 65535)
    2854:	fe 01       	movw	r30, r28
    2856:	e7 59       	subi	r30, 0x97	; 151
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	0c f0       	brlt	.+2      	; 0x2874 <__stack+0x675>
    2872:	43 c0       	rjmp	.+134    	; 0x28fa <__stack+0x6fb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2874:	fe 01       	movw	r30, r28
    2876:	e3 59       	subi	r30, 0x93	; 147
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8e 01       	movw	r16, r28
    2894:	09 59       	subi	r16, 0x99	; 153
    2896:	1f 4f       	sbci	r17, 0xFF	; 255
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	f8 01       	movw	r30, r16
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	80 83       	st	Z, r24
    28aa:	1f c0       	rjmp	.+62     	; 0x28ea <__stack+0x6eb>
    28ac:	fe 01       	movw	r30, r28
    28ae:	eb 59       	subi	r30, 0x9B	; 155
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 e7       	ldi	r24, 0x70	; 112
    28b4:	91 e0       	ldi	r25, 0x01	; 1
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
    28ba:	fe 01       	movw	r30, r28
    28bc:	eb 59       	subi	r30, 0x9B	; 155
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <__stack+0x6c5>
    28c8:	fe 01       	movw	r30, r28
    28ca:	eb 59       	subi	r30, 0x9B	; 155
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	de 01       	movw	r26, r28
    28d4:	a9 59       	subi	r26, 0x99	; 153
    28d6:	bf 4f       	sbci	r27, 0xFF	; 255
    28d8:	fe 01       	movw	r30, r28
    28da:	e9 59       	subi	r30, 0x99	; 153
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	11 96       	adiw	r26, 0x01	; 1
    28e6:	9c 93       	st	X, r25
    28e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ea:	fe 01       	movw	r30, r28
    28ec:	e9 59       	subi	r30, 0x99	; 153
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	d1 f6       	brne	.-76     	; 0x28ac <__stack+0x6ad>
    28f8:	27 c0       	rjmp	.+78     	; 0x2948 <__stack+0x749>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	8e 01       	movw	r16, r28
    28fc:	09 59       	subi	r16, 0x99	; 153
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	e7 59       	subi	r30, 0x97	; 151
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	f8 01       	movw	r30, r16
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	de 01       	movw	r26, r28
    291e:	ad 59       	subi	r26, 0x9D	; 157
    2920:	bf 4f       	sbci	r27, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	e9 59       	subi	r30, 0x99	; 153
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	8d 93       	st	X+, r24
    292e:	9c 93       	st	X, r25
    2930:	fe 01       	movw	r30, r28
    2932:	ed 59       	subi	r30, 0x9D	; 157
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <__stack+0x73b>
    293e:	fe 01       	movw	r30, r28
    2940:	ed 59       	subi	r30, 0x9D	; 157
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
      _delay_ms(300);

     backward_mm_ext(225);
    2948:	81 ee       	ldi	r24, 0xE1	; 225
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <backward_mm_ext>
    2950:	fe 01       	movw	r30, r28
    2952:	e1 5a       	subi	r30, 0xA1	; 161
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	a6 e1       	ldi	r26, 0x16	; 22
    295c:	b4 e4       	ldi	r27, 0x44	; 68
    295e:	80 83       	st	Z, r24
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	a2 83       	std	Z+2, r26	; 0x02
    2964:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2966:	8e 01       	movw	r16, r28
    2968:	05 5a       	subi	r16, 0xA5	; 165
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	fe 01       	movw	r30, r28
    296e:	e1 5a       	subi	r30, 0xA1	; 161
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	26 e6       	ldi	r18, 0x66	; 102
    297c:	36 e6       	ldi	r19, 0x66	; 102
    297e:	46 e6       	ldi	r20, 0x66	; 102
    2980:	55 e4       	ldi	r21, 0x45	; 69
    2982:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	f8 01       	movw	r30, r16
    298c:	80 83       	st	Z, r24
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	a2 83       	std	Z+2, r26	; 0x02
    2992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2994:	fe 01       	movw	r30, r28
    2996:	e5 5a       	subi	r30, 0xA5	; 165
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e8       	ldi	r20, 0x80	; 128
    29a8:	5f e3       	ldi	r21, 0x3F	; 63
    29aa:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    29ae:	88 23       	and	r24, r24
    29b0:	44 f4       	brge	.+16     	; 0x29c2 <__stack+0x7c3>
		__ticks = 1;
    29b2:	fe 01       	movw	r30, r28
    29b4:	e7 5a       	subi	r30, 0xA7	; 167
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    29c0:	64 c0       	rjmp	.+200    	; 0x2a8a <__stack+0x88b>
	else if (__tmp > 65535)
    29c2:	fe 01       	movw	r30, r28
    29c4:	e5 5a       	subi	r30, 0xA5	; 165
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	3f ef       	ldi	r19, 0xFF	; 255
    29d4:	4f e7       	ldi	r20, 0x7F	; 127
    29d6:	57 e4       	ldi	r21, 0x47	; 71
    29d8:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    29dc:	18 16       	cp	r1, r24
    29de:	0c f0       	brlt	.+2      	; 0x29e2 <__stack+0x7e3>
    29e0:	43 c0       	rjmp	.+134    	; 0x2a68 <__stack+0x869>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	fe 01       	movw	r30, r28
    29e4:	e1 5a       	subi	r30, 0xA1	; 161
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8e 01       	movw	r16, r28
    2a02:	07 5a       	subi	r16, 0xA7	; 167
    2a04:	1f 4f       	sbci	r17, 0xFF	; 255
    2a06:	bc 01       	movw	r22, r24
    2a08:	cd 01       	movw	r24, r26
    2a0a:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	f8 01       	movw	r30, r16
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	1f c0       	rjmp	.+62     	; 0x2a58 <__stack+0x859>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e9 5a       	subi	r30, 0xA9	; 169
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 e7       	ldi	r24, 0x70	; 112
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	91 83       	std	Z+1, r25	; 0x01
    2a26:	80 83       	st	Z, r24
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e9 5a       	subi	r30, 0xA9	; 169
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <__stack+0x833>
    2a36:	fe 01       	movw	r30, r28
    2a38:	e9 5a       	subi	r30, 0xA9	; 169
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	de 01       	movw	r26, r28
    2a42:	a7 5a       	subi	r26, 0xA7	; 167
    2a44:	bf 4f       	sbci	r27, 0xFF	; 255
    2a46:	fe 01       	movw	r30, r28
    2a48:	e7 5a       	subi	r30, 0xA7	; 167
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	11 96       	adiw	r26, 0x01	; 1
    2a54:	9c 93       	st	X, r25
    2a56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e7 5a       	subi	r30, 0xA7	; 167
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 81       	ld	r24, Z
    2a60:	91 81       	ldd	r25, Z+1	; 0x01
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	d1 f6       	brne	.-76     	; 0x2a1a <__stack+0x81b>
    2a66:	27 c0       	rjmp	.+78     	; 0x2ab6 <__stack+0x8b7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	8e 01       	movw	r16, r28
    2a6a:	07 5a       	subi	r16, 0xA7	; 167
    2a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e5 5a       	subi	r30, 0xA5	; 165
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	f8 01       	movw	r30, r16
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
    2a8a:	de 01       	movw	r26, r28
    2a8c:	ab 5a       	subi	r26, 0xAB	; 171
    2a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	e7 5a       	subi	r30, 0xA7	; 167
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	8d 93       	st	X+, r24
    2a9c:	9c 93       	st	X, r25
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	eb 5a       	subi	r30, 0xAB	; 171
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <__stack+0x8a9>
    2aac:	fe 01       	movw	r30, r28
    2aae:	eb 5a       	subi	r30, 0xAB	; 171
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	80 83       	st	Z, r24
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ef 5a       	subi	r30, 0xAF	; 175
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	a6 e9       	ldi	r26, 0x96	; 150
    2ac2:	b4 e4       	ldi	r27, 0x44	; 68
    2ac4:	80 83       	st	Z, r24
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	a2 83       	std	Z+2, r26	; 0x02
    2aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	8e 01       	movw	r16, r28
    2ace:	03 5b       	subi	r16, 0xB3	; 179
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ef 5a       	subi	r30, 0xAF	; 175
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	26 e6       	ldi	r18, 0x66	; 102
    2ae2:	36 e6       	ldi	r19, 0x66	; 102
    2ae4:	46 e6       	ldi	r20, 0x66	; 102
    2ae6:	55 e4       	ldi	r21, 0x45	; 69
    2ae8:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	f8 01       	movw	r30, r16
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2afa:	fe 01       	movw	r30, r28
    2afc:	e3 5b       	subi	r30, 0xB3	; 179
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	44 f4       	brge	.+16     	; 0x2b28 <__stack+0x929>
		__ticks = 1;
    2b18:	fe 01       	movw	r30, r28
    2b1a:	e5 5b       	subi	r30, 0xB5	; 181
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	80 83       	st	Z, r24
    2b26:	64 c0       	rjmp	.+200    	; 0x2bf0 <__stack+0x9f1>
	else if (__tmp > 65535)
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e3 5b       	subi	r30, 0xB3	; 179
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	3f ef       	ldi	r19, 0xFF	; 255
    2b3a:	4f e7       	ldi	r20, 0x7F	; 127
    2b3c:	57 e4       	ldi	r21, 0x47	; 71
    2b3e:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    2b42:	18 16       	cp	r1, r24
    2b44:	0c f0       	brlt	.+2      	; 0x2b48 <__stack+0x949>
    2b46:	43 c0       	rjmp	.+134    	; 0x2bce <__stack+0x9cf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ef 5a       	subi	r30, 0xAF	; 175
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e2       	ldi	r20, 0x20	; 32
    2b5c:	51 e4       	ldi	r21, 0x41	; 65
    2b5e:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	8e 01       	movw	r16, r28
    2b68:	05 5b       	subi	r16, 0xB5	; 181
    2b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	f8 01       	movw	r30, r16
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	1f c0       	rjmp	.+62     	; 0x2bbe <__stack+0x9bf>
    2b80:	fe 01       	movw	r30, r28
    2b82:	e7 5b       	subi	r30, 0xB7	; 183
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 e7       	ldi	r24, 0x70	; 112
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	80 83       	st	Z, r24
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e7 5b       	subi	r30, 0xB7	; 183
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <__stack+0x999>
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e7 5b       	subi	r30, 0xB7	; 183
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba6:	de 01       	movw	r26, r28
    2ba8:	a5 5b       	subi	r26, 0xB5	; 181
    2baa:	bf 4f       	sbci	r27, 0xFF	; 255
    2bac:	fe 01       	movw	r30, r28
    2bae:	e5 5b       	subi	r30, 0xB5	; 181
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	11 96       	adiw	r26, 0x01	; 1
    2bba:	9c 93       	st	X, r25
    2bbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e5 5b       	subi	r30, 0xB5	; 181
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	d1 f6       	brne	.-76     	; 0x2b80 <__stack+0x981>
    2bcc:	27 c0       	rjmp	.+78     	; 0x2c1c <__stack+0xa1d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	8e 01       	movw	r16, r28
    2bd0:	05 5b       	subi	r16, 0xB5	; 181
    2bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e3 5b       	subi	r30, 0xB3	; 179
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	60 81       	ld	r22, Z
    2bdc:	71 81       	ldd	r23, Z+1	; 0x01
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	93 81       	ldd	r25, Z+3	; 0x03
    2be2:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	f8 01       	movw	r30, r16
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24
    2bf0:	de 01       	movw	r26, r28
    2bf2:	a9 5b       	subi	r26, 0xB9	; 185
    2bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e5 5b       	subi	r30, 0xB5	; 181
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	8d 93       	st	X+, r24
    2c02:	9c 93       	st	X, r25
    2c04:	fe 01       	movw	r30, r28
    2c06:	e9 5b       	subi	r30, 0xB9	; 185
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <__stack+0xa0f>
    2c12:	fe 01       	movw	r30, r28
    2c14:	e9 5b       	subi	r30, 0xB9	; 185
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
     _delay_ms(600);
     _delay_ms(1200);
     

     servo_1(180);
    2c1c:	84 eb       	ldi	r24, 0xB4	; 180
    2c1e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <servo_1>
    2c22:	fe 01       	movw	r30, r28
    2c24:	ed 5b       	subi	r30, 0xBD	; 189
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a6 e9       	ldi	r26, 0x96	; 150
    2c2e:	b3 e4       	ldi	r27, 0x43	; 67
    2c30:	80 83       	st	Z, r24
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	a2 83       	std	Z+2, r26	; 0x02
    2c36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	8e 01       	movw	r16, r28
    2c3a:	01 5c       	subi	r16, 0xC1	; 193
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ed 5b       	subi	r30, 0xBD	; 189
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	26 e6       	ldi	r18, 0x66	; 102
    2c4e:	36 e6       	ldi	r19, 0x66	; 102
    2c50:	46 e6       	ldi	r20, 0x66	; 102
    2c52:	55 e4       	ldi	r21, 0x45	; 69
    2c54:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c66:	fe 01       	movw	r30, r28
    2c68:	ff 96       	adiw	r30, 0x3f	; 63
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <__stack+0xa8d>
		__ticks = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9e af       	std	Y+62, r25	; 0x3e
    2c88:	8d af       	std	Y+61, r24	; 0x3d
    2c8a:	46 c0       	rjmp	.+140    	; 0x2d18 <__stack+0xb19>
	else if (__tmp > 65535)
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ff 96       	adiw	r30, 0x3f	; 63
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	93 81       	ldd	r25, Z+3	; 0x03
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	64 f5       	brge	.+88     	; 0x2d00 <__stack+0xb01>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ed 5b       	subi	r30, 0xBD	; 189
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e af       	std	Y+62, r25	; 0x3e
    2cd4:	8d af       	std	Y+61, r24	; 0x3d
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <__stack+0xaf7>
    2cd8:	80 e7       	ldi	r24, 0x70	; 112
    2cda:	91 e0       	ldi	r25, 0x01	; 1
    2cdc:	9c af       	std	Y+60, r25	; 0x3c
    2cde:	8b af       	std	Y+59, r24	; 0x3b
    2ce0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ce2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <__stack+0xae5>
    2ce8:	9c af       	std	Y+60, r25	; 0x3c
    2cea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cee:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	9e af       	std	Y+62, r25	; 0x3e
    2cf4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cf8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <__stack+0xad9>
    2cfe:	16 c0       	rjmp	.+44     	; 0x2d2c <__stack+0xb2d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	fe 01       	movw	r30, r28
    2d02:	ff 96       	adiw	r30, 0x3f	; 63
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9e af       	std	Y+62, r25	; 0x3e
    2d16:	8d af       	std	Y+61, r24	; 0x3d
    2d18:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d1c:	9a af       	std	Y+58, r25	; 0x3a
    2d1e:	89 af       	std	Y+57, r24	; 0x39
    2d20:	89 ad       	ldd	r24, Y+57	; 0x39
    2d22:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <__stack+0xb25>
    2d28:	9a af       	std	Y+58, r25	; 0x3a
    2d2a:	89 af       	std	Y+57, r24	; 0x39
     _delay_ms(300);

     forward_mm_ext(290);
    2d2c:	82 e2       	ldi	r24, 0x22	; 34
    2d2e:	91 e0       	ldi	r25, 0x01	; 1
    2d30:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <forward_mm_ext>
     stop();
    2d34:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d3e:	b2 e4       	ldi	r27, 0x42	; 66
    2d40:	8d ab       	std	Y+53, r24	; 0x35
    2d42:	9e ab       	std	Y+54, r25	; 0x36
    2d44:	af ab       	std	Y+55, r26	; 0x37
    2d46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d48:	6d a9       	ldd	r22, Y+53	; 0x35
    2d4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2d50:	26 e6       	ldi	r18, 0x66	; 102
    2d52:	36 e6       	ldi	r19, 0x66	; 102
    2d54:	46 e6       	ldi	r20, 0x66	; 102
    2d56:	55 e4       	ldi	r21, 0x45	; 69
    2d58:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	89 ab       	std	Y+49, r24	; 0x31
    2d62:	9a ab       	std	Y+50, r25	; 0x32
    2d64:	ab ab       	std	Y+51, r26	; 0x33
    2d66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d68:	69 a9       	ldd	r22, Y+49	; 0x31
    2d6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e8       	ldi	r20, 0x80	; 128
    2d76:	5f e3       	ldi	r21, 0x3F	; 63
    2d78:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    2d7c:	88 23       	and	r24, r24
    2d7e:	2c f4       	brge	.+10     	; 0x2d8a <__stack+0xb8b>
		__ticks = 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	98 ab       	std	Y+48, r25	; 0x30
    2d86:	8f a7       	std	Y+47, r24	; 0x2f
    2d88:	3f c0       	rjmp	.+126    	; 0x2e08 <__stack+0xc09>
	else if (__tmp > 65535)
    2d8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d90:	9c a9       	ldd	r25, Y+52	; 0x34
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	3f ef       	ldi	r19, 0xFF	; 255
    2d96:	4f e7       	ldi	r20, 0x7F	; 127
    2d98:	57 e4       	ldi	r21, 0x47	; 71
    2d9a:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    2d9e:	18 16       	cp	r1, r24
    2da0:	4c f5       	brge	.+82     	; 0x2df4 <__stack+0xbf5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da2:	6d a9       	ldd	r22, Y+53	; 0x35
    2da4:	7e a9       	ldd	r23, Y+54	; 0x36
    2da6:	8f a9       	ldd	r24, Y+55	; 0x37
    2da8:	98 ad       	ldd	r25, Y+56	; 0x38
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e2       	ldi	r20, 0x20	; 32
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	bc 01       	movw	r22, r24
    2dbc:	cd 01       	movw	r24, r26
    2dbe:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	98 ab       	std	Y+48, r25	; 0x30
    2dc8:	8f a7       	std	Y+47, r24	; 0x2f
    2dca:	0f c0       	rjmp	.+30     	; 0x2dea <__stack+0xbeb>
    2dcc:	80 e7       	ldi	r24, 0x70	; 112
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	9e a7       	std	Y+46, r25	; 0x2e
    2dd2:	8d a7       	std	Y+45, r24	; 0x2d
    2dd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <__stack+0xbd9>
    2ddc:	9e a7       	std	Y+46, r25	; 0x2e
    2dde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2de2:	98 a9       	ldd	r25, Y+48	; 0x30
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	98 ab       	std	Y+48, r25	; 0x30
    2de8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dec:	98 a9       	ldd	r25, Y+48	; 0x30
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	69 f7       	brne	.-38     	; 0x2dcc <__stack+0xbcd>
    2df2:	14 c0       	rjmp	.+40     	; 0x2e1c <__stack+0xc1d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df4:	69 a9       	ldd	r22, Y+49	; 0x31
    2df6:	7a a9       	ldd	r23, Y+50	; 0x32
    2df8:	8b a9       	ldd	r24, Y+51	; 0x33
    2dfa:	9c a9       	ldd	r25, Y+52	; 0x34
    2dfc:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	98 ab       	std	Y+48, r25	; 0x30
    2e06:	8f a7       	std	Y+47, r24	; 0x2f
    2e08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e0c:	9c a7       	std	Y+44, r25	; 0x2c
    2e0e:	8b a7       	std	Y+43, r24	; 0x2b
    2e10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <__stack+0xc15>
    2e18:	9c a7       	std	Y+44, r25	; 0x2c
    2e1a:	8b a7       	std	Y+43, r24	; 0x2b
     _delay_ms(100);
  
     velocity(170,200);
    2e1c:	8a ea       	ldi	r24, 0xAA	; 170
    2e1e:	68 ec       	ldi	r22, 0xC8	; 200
    2e20:	0e 94 a6 0b 	call	0x174c	; 0x174c <velocity>
   
	   back_mm(400);
    2e24:	80 e9       	ldi	r24, 0x90	; 144
    2e26:	91 e0       	ldi	r25, 0x01	; 1
    2e28:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <back_mm>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	a6 e9       	ldi	r26, 0x96	; 150
    2e32:	b3 e4       	ldi	r27, 0x43	; 67
    2e34:	8f a3       	std	Y+39, r24	; 0x27
    2e36:	98 a7       	std	Y+40, r25	; 0x28
    2e38:	a9 a7       	std	Y+41, r26	; 0x29
    2e3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e40:	89 a5       	ldd	r24, Y+41	; 0x29
    2e42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e44:	26 e6       	ldi	r18, 0x66	; 102
    2e46:	36 e6       	ldi	r19, 0x66	; 102
    2e48:	46 e6       	ldi	r20, 0x66	; 102
    2e4a:	55 e4       	ldi	r21, 0x45	; 69
    2e4c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8b a3       	std	Y+35, r24	; 0x23
    2e56:	9c a3       	std	Y+36, r25	; 0x24
    2e58:	ad a3       	std	Y+37, r26	; 0x25
    2e5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e60:	8d a1       	ldd	r24, Y+37	; 0x25
    2e62:	9e a1       	ldd	r25, Y+38	; 0x26
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e8       	ldi	r20, 0x80	; 128
    2e6a:	5f e3       	ldi	r21, 0x3F	; 63
    2e6c:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    2e70:	88 23       	and	r24, r24
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <__stack+0xc7f>
		__ticks = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	9a a3       	std	Y+34, r25	; 0x22
    2e7a:	89 a3       	std	Y+33, r24	; 0x21
    2e7c:	3f c0       	rjmp	.+126    	; 0x2efc <__stack+0xcfd>
	else if (__tmp > 65535)
    2e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e80:	7c a1       	ldd	r23, Y+36	; 0x24
    2e82:	8d a1       	ldd	r24, Y+37	; 0x25
    2e84:	9e a1       	ldd	r25, Y+38	; 0x26
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	3f ef       	ldi	r19, 0xFF	; 255
    2e8a:	4f e7       	ldi	r20, 0x7F	; 127
    2e8c:	57 e4       	ldi	r21, 0x47	; 71
    2e8e:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    2e92:	18 16       	cp	r1, r24
    2e94:	4c f5       	brge	.+82     	; 0x2ee8 <__stack+0xce9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e96:	6f a1       	ldd	r22, Y+39	; 0x27
    2e98:	78 a5       	ldd	r23, Y+40	; 0x28
    2e9a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9a a3       	std	Y+34, r25	; 0x22
    2ebc:	89 a3       	std	Y+33, r24	; 0x21
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <__stack+0xcdf>
    2ec0:	80 e7       	ldi	r24, 0x70	; 112
    2ec2:	91 e0       	ldi	r25, 0x01	; 1
    2ec4:	98 a3       	std	Y+32, r25	; 0x20
    2ec6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ec8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eca:	98 a1       	ldd	r25, Y+32	; 0x20
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <__stack+0xccd>
    2ed0:	98 a3       	std	Y+32, r25	; 0x20
    2ed2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	9a a3       	std	Y+34, r25	; 0x22
    2edc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <__stack+0xcc1>
    2ee6:	14 c0       	rjmp	.+40     	; 0x2f10 <__stack+0xd11>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eea:	7c a1       	ldd	r23, Y+36	; 0x24
    2eec:	8d a1       	ldd	r24, Y+37	; 0x25
    2eee:	9e a1       	ldd	r25, Y+38	; 0x26
    2ef0:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9a a3       	std	Y+34, r25	; 0x22
    2efa:	89 a3       	std	Y+33, r24	; 0x21
    2efc:	89 a1       	ldd	r24, Y+33	; 0x21
    2efe:	9a a1       	ldd	r25, Y+34	; 0x22
    2f00:	9e 8f       	std	Y+30, r25	; 0x1e
    2f02:	8d 8f       	std	Y+29, r24	; 0x1d
    2f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <__stack+0xd09>
    2f0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f0e:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(300);
	 stop();
    2f10:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>

      velocity(190,240);
    2f14:	8e eb       	ldi	r24, 0xBE	; 190
    2f16:	60 ef       	ldi	r22, 0xF0	; 240
    2f18:	0e 94 a6 0b 	call	0x174c	; 0x174c <velocity>
	  left_degrees(90);
    2f1c:	8a e5       	ldi	r24, 0x5A	; 90
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <left_degrees>
	  stop();
    2f24:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	a0 e7       	ldi	r26, 0x70	; 112
    2f2e:	b2 e4       	ldi	r27, 0x42	; 66
    2f30:	89 8f       	std	Y+25, r24	; 0x19
    2f32:	9a 8f       	std	Y+26, r25	; 0x1a
    2f34:	ab 8f       	std	Y+27, r26	; 0x1b
    2f36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f38:	69 8d       	ldd	r22, Y+25	; 0x19
    2f3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f40:	26 e6       	ldi	r18, 0x66	; 102
    2f42:	36 e6       	ldi	r19, 0x66	; 102
    2f44:	46 e6       	ldi	r20, 0x66	; 102
    2f46:	55 e4       	ldi	r21, 0x45	; 69
    2f48:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	8d 8b       	std	Y+21, r24	; 0x15
    2f52:	9e 8b       	std	Y+22, r25	; 0x16
    2f54:	af 8b       	std	Y+23, r26	; 0x17
    2f56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f58:	6d 89       	ldd	r22, Y+21	; 0x15
    2f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 e8       	ldi	r20, 0x80	; 128
    2f66:	5f e3       	ldi	r21, 0x3F	; 63
    2f68:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    2f6c:	88 23       	and	r24, r24
    2f6e:	2c f4       	brge	.+10     	; 0x2f7a <__stack+0xd7b>
		__ticks = 1;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9c 8b       	std	Y+20, r25	; 0x14
    2f76:	8b 8b       	std	Y+19, r24	; 0x13
    2f78:	3f c0       	rjmp	.+126    	; 0x2ff8 <__stack+0xdf9>
	else if (__tmp > 65535)
    2f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f80:	98 8d       	ldd	r25, Y+24	; 0x18
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	3f ef       	ldi	r19, 0xFF	; 255
    2f86:	4f e7       	ldi	r20, 0x7F	; 127
    2f88:	57 e4       	ldi	r21, 0x47	; 71
    2f8a:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    2f8e:	18 16       	cp	r1, r24
    2f90:	4c f5       	brge	.+82     	; 0x2fe4 <__stack+0xde5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f92:	69 8d       	ldd	r22, Y+25	; 0x19
    2f94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e2       	ldi	r20, 0x20	; 32
    2fa0:	51 e4       	ldi	r21, 0x41	; 65
    2fa2:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	bc 01       	movw	r22, r24
    2fac:	cd 01       	movw	r24, r26
    2fae:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	9c 8b       	std	Y+20, r25	; 0x14
    2fb8:	8b 8b       	std	Y+19, r24	; 0x13
    2fba:	0f c0       	rjmp	.+30     	; 0x2fda <__stack+0xddb>
    2fbc:	80 e7       	ldi	r24, 0x70	; 112
    2fbe:	91 e0       	ldi	r25, 0x01	; 1
    2fc0:	9a 8b       	std	Y+18, r25	; 0x12
    2fc2:	89 8b       	std	Y+17, r24	; 0x11
    2fc4:	89 89       	ldd	r24, Y+17	; 0x11
    2fc6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <__stack+0xdc9>
    2fcc:	9a 8b       	std	Y+18, r25	; 0x12
    2fce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	9c 8b       	std	Y+20, r25	; 0x14
    2fd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fda:	8b 89       	ldd	r24, Y+19	; 0x13
    2fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	69 f7       	brne	.-38     	; 0x2fbc <__stack+0xdbd>
    2fe2:	14 c0       	rjmp	.+40     	; 0x300c <__stack+0xe0d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fea:	98 8d       	ldd	r25, Y+24	; 0x18
    2fec:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	9c 8b       	std	Y+20, r25	; 0x14
    2ff6:	8b 8b       	std	Y+19, r24	; 0x13
    2ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffc:	98 8b       	std	Y+16, r25	; 0x10
    2ffe:	8f 87       	std	Y+15, r24	; 0x0f
    3000:	8f 85       	ldd	r24, Y+15	; 0x0f
    3002:	98 89       	ldd	r25, Y+16	; 0x10
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <__stack+0xe05>
    3008:	98 8b       	std	Y+16, r25	; 0x10
    300a:	8f 87       	std	Y+15, r24	; 0x0f
	  _delay_ms(60);

	  velocity(190,240);
    300c:	8e eb       	ldi	r24, 0xBE	; 190
    300e:	60 ef       	ldi	r22, 0xF0	; 240
    3010:	0e 94 a6 0b 	call	0x174c	; 0x174c <velocity>
     forward_mm(k);//for moving robot in y direction
    3014:	fe 01       	movw	r30, r28
    3016:	eb 52       	subi	r30, 0x2B	; 43
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <forward_mm>
     stop();
    3022:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a6 e9       	ldi	r26, 0x96	; 150
    302c:	b3 e4       	ldi	r27, 0x43	; 67
    302e:	8b 87       	std	Y+11, r24	; 0x0b
    3030:	9c 87       	std	Y+12, r25	; 0x0c
    3032:	ad 87       	std	Y+13, r26	; 0x0d
    3034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3036:	6b 85       	ldd	r22, Y+11	; 0x0b
    3038:	7c 85       	ldd	r23, Y+12	; 0x0c
    303a:	8d 85       	ldd	r24, Y+13	; 0x0d
    303c:	9e 85       	ldd	r25, Y+14	; 0x0e
    303e:	26 e6       	ldi	r18, 0x66	; 102
    3040:	36 e6       	ldi	r19, 0x66	; 102
    3042:	46 e6       	ldi	r20, 0x66	; 102
    3044:	55 e4       	ldi	r21, 0x45	; 69
    3046:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8f 83       	std	Y+7, r24	; 0x07
    3050:	98 87       	std	Y+8, r25	; 0x08
    3052:	a9 87       	std	Y+9, r26	; 0x09
    3054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 93 1c 	call	0x3926	; 0x3926 <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	2c f4       	brge	.+10     	; 0x3078 <__stack+0xe79>
		__ticks = 1;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	3f c0       	rjmp	.+126    	; 0x30f6 <__stack+0xef7>
	else if (__tmp > 65535)
    3078:	6f 81       	ldd	r22, Y+7	; 0x07
    307a:	78 85       	ldd	r23, Y+8	; 0x08
    307c:	89 85       	ldd	r24, Y+9	; 0x09
    307e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 33 1c 	call	0x3866	; 0x3866 <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	4c f5       	brge	.+82     	; 0x30e2 <__stack+0xee3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	6b 85       	ldd	r22, Y+11	; 0x0b
    3092:	7c 85       	ldd	r23, Y+12	; 0x0c
    3094:	8d 85       	ldd	r24, Y+13	; 0x0d
    3096:	9e 85       	ldd	r25, Y+14	; 0x0e
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <__stack+0xed9>
    30ba:	80 e7       	ldi	r24, 0x70	; 112
    30bc:	91 e0       	ldi	r25, 0x01	; 1
    30be:	9c 83       	std	Y+4, r25	; 0x04
    30c0:	8b 83       	std	Y+3, r24	; 0x03
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	9c 81       	ldd	r25, Y+4	; 0x04
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <__stack+0xec7>
    30ca:	9c 83       	std	Y+4, r25	; 0x04
    30cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d8:	8d 81       	ldd	r24, Y+5	; 0x05
    30da:	9e 81       	ldd	r25, Y+6	; 0x06
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <__stack+0xebb>
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <__stack+0xf0b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	0e 94 b7 18 	call	0x316e	; 0x316e <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <__stack+0xf03>
    3106:	9a 83       	std	Y+2, r25	; 0x02
    3108:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(300);
      k=k-120;
    310a:	de 01       	movw	r26, r28
    310c:	ab 52       	subi	r26, 0x2B	; 43
    310e:	bf 4f       	sbci	r27, 0xFF	; 255
    3110:	fe 01       	movw	r30, r28
    3112:	eb 52       	subi	r30, 0x2B	; 43
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	88 57       	subi	r24, 0x78	; 120
    311c:	90 40       	sbci	r25, 0x00	; 0
    311e:	8d 93       	st	X+, r24
    3120:	9c 93       	st	X, r25
	  i=i+1;//for 3 iteration
    3122:	de 01       	movw	r26, r28
    3124:	ad 52       	subi	r26, 0x2D	; 45
    3126:	bf 4f       	sbci	r27, 0xFF	; 255
    3128:	fe 01       	movw	r30, r28
    312a:	ed 52       	subi	r30, 0x2D	; 45
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	80 81       	ld	r24, Z
    3130:	91 81       	ldd	r25, Z+1	; 0x01
    3132:	01 96       	adiw	r24, 0x01	; 1
    3134:	11 96       	adiw	r26, 0x01	; 1
    3136:	9c 93       	st	X, r25
    3138:	8e 93       	st	-X, r24

 										//LCD initialization functions
  
int k=240;
 int i=0;
 while(i<3)
    313a:	fe 01       	movw	r30, r28
    313c:	ed 52       	subi	r30, 0x2D	; 45
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	83 30       	cpi	r24, 0x03	; 3
    3146:	91 05       	cpc	r25, r1
    3148:	14 f4       	brge	.+4      	; 0x314e <__stack+0xf4f>
    314a:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <main+0x3e>
      k=k-120;
	  i=i+1;//for 3 iteration
      }
	 
	  
	    stop();
    314e:	0e 94 83 0c 	call	0x1906	; 0x1906 <stop>
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
	   
    

     
    }
    3156:	ca 52       	subi	r28, 0x2A	; 42
    3158:	df 4f       	sbci	r29, 0xFF	; 255
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	cf 91       	pop	r28
    3166:	df 91       	pop	r29
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	08 95       	ret

0000316e <__fixunssfsi>:
    316e:	ef 92       	push	r14
    3170:	ff 92       	push	r15
    3172:	0f 93       	push	r16
    3174:	1f 93       	push	r17
    3176:	7b 01       	movw	r14, r22
    3178:	8c 01       	movw	r16, r24
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e0       	ldi	r20, 0x00	; 0
    3180:	5f e4       	ldi	r21, 0x4F	; 79
    3182:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__gesf2>
    3186:	88 23       	and	r24, r24
    3188:	8c f0       	brlt	.+34     	; 0x31ac <__fixunssfsi+0x3e>
    318a:	c8 01       	movw	r24, r16
    318c:	b7 01       	movw	r22, r14
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	5f e4       	ldi	r21, 0x4F	; 79
    3196:	0e 94 2f 1a 	call	0x345e	; 0x345e <__subsf3>
    319a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__fixsfsi>
    319e:	9b 01       	movw	r18, r22
    31a0:	ac 01       	movw	r20, r24
    31a2:	20 50       	subi	r18, 0x00	; 0
    31a4:	30 40       	sbci	r19, 0x00	; 0
    31a6:	40 40       	sbci	r20, 0x00	; 0
    31a8:	50 48       	sbci	r21, 0x80	; 128
    31aa:	06 c0       	rjmp	.+12     	; 0x31b8 <__fixunssfsi+0x4a>
    31ac:	c8 01       	movw	r24, r16
    31ae:	b7 01       	movw	r22, r14
    31b0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__fixsfsi>
    31b4:	9b 01       	movw	r18, r22
    31b6:	ac 01       	movw	r20, r24
    31b8:	b9 01       	movw	r22, r18
    31ba:	ca 01       	movw	r24, r20
    31bc:	1f 91       	pop	r17
    31be:	0f 91       	pop	r16
    31c0:	ff 90       	pop	r15
    31c2:	ef 90       	pop	r14
    31c4:	08 95       	ret

000031c6 <_fpadd_parts>:
    31c6:	a0 e0       	ldi	r26, 0x00	; 0
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	e9 ee       	ldi	r30, 0xE9	; 233
    31cc:	f8 e1       	ldi	r31, 0x18	; 24
    31ce:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__prologue_saves__>
    31d2:	dc 01       	movw	r26, r24
    31d4:	2b 01       	movw	r4, r22
    31d6:	fa 01       	movw	r30, r20
    31d8:	9c 91       	ld	r25, X
    31da:	92 30       	cpi	r25, 0x02	; 2
    31dc:	08 f4       	brcc	.+2      	; 0x31e0 <_fpadd_parts+0x1a>
    31de:	39 c1       	rjmp	.+626    	; 0x3452 <_fpadd_parts+0x28c>
    31e0:	eb 01       	movw	r28, r22
    31e2:	88 81       	ld	r24, Y
    31e4:	82 30       	cpi	r24, 0x02	; 2
    31e6:	08 f4       	brcc	.+2      	; 0x31ea <_fpadd_parts+0x24>
    31e8:	33 c1       	rjmp	.+614    	; 0x3450 <_fpadd_parts+0x28a>
    31ea:	94 30       	cpi	r25, 0x04	; 4
    31ec:	69 f4       	brne	.+26     	; 0x3208 <_fpadd_parts+0x42>
    31ee:	84 30       	cpi	r24, 0x04	; 4
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <_fpadd_parts+0x2e>
    31f2:	2f c1       	rjmp	.+606    	; 0x3452 <_fpadd_parts+0x28c>
    31f4:	11 96       	adiw	r26, 0x01	; 1
    31f6:	9c 91       	ld	r25, X
    31f8:	11 97       	sbiw	r26, 0x01	; 1
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	98 17       	cp	r25, r24
    31fe:	09 f4       	brne	.+2      	; 0x3202 <_fpadd_parts+0x3c>
    3200:	28 c1       	rjmp	.+592    	; 0x3452 <_fpadd_parts+0x28c>
    3202:	a0 e0       	ldi	r26, 0x00	; 0
    3204:	b2 e0       	ldi	r27, 0x02	; 2
    3206:	25 c1       	rjmp	.+586    	; 0x3452 <_fpadd_parts+0x28c>
    3208:	84 30       	cpi	r24, 0x04	; 4
    320a:	09 f4       	brne	.+2      	; 0x320e <_fpadd_parts+0x48>
    320c:	21 c1       	rjmp	.+578    	; 0x3450 <_fpadd_parts+0x28a>
    320e:	82 30       	cpi	r24, 0x02	; 2
    3210:	a9 f4       	brne	.+42     	; 0x323c <_fpadd_parts+0x76>
    3212:	92 30       	cpi	r25, 0x02	; 2
    3214:	09 f0       	breq	.+2      	; 0x3218 <_fpadd_parts+0x52>
    3216:	1d c1       	rjmp	.+570    	; 0x3452 <_fpadd_parts+0x28c>
    3218:	9a 01       	movw	r18, r20
    321a:	ad 01       	movw	r20, r26
    321c:	88 e0       	ldi	r24, 0x08	; 8
    321e:	ea 01       	movw	r28, r20
    3220:	09 90       	ld	r0, Y+
    3222:	ae 01       	movw	r20, r28
    3224:	e9 01       	movw	r28, r18
    3226:	09 92       	st	Y+, r0
    3228:	9e 01       	movw	r18, r28
    322a:	81 50       	subi	r24, 0x01	; 1
    322c:	c1 f7       	brne	.-16     	; 0x321e <_fpadd_parts+0x58>
    322e:	e2 01       	movw	r28, r4
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	11 96       	adiw	r26, 0x01	; 1
    3234:	9c 91       	ld	r25, X
    3236:	89 23       	and	r24, r25
    3238:	81 83       	std	Z+1, r24	; 0x01
    323a:	08 c1       	rjmp	.+528    	; 0x344c <_fpadd_parts+0x286>
    323c:	92 30       	cpi	r25, 0x02	; 2
    323e:	09 f4       	brne	.+2      	; 0x3242 <_fpadd_parts+0x7c>
    3240:	07 c1       	rjmp	.+526    	; 0x3450 <_fpadd_parts+0x28a>
    3242:	12 96       	adiw	r26, 0x02	; 2
    3244:	2d 90       	ld	r2, X+
    3246:	3c 90       	ld	r3, X
    3248:	13 97       	sbiw	r26, 0x03	; 3
    324a:	eb 01       	movw	r28, r22
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	9b 81       	ldd	r25, Y+3	; 0x03
    3250:	14 96       	adiw	r26, 0x04	; 4
    3252:	ad 90       	ld	r10, X+
    3254:	bd 90       	ld	r11, X+
    3256:	cd 90       	ld	r12, X+
    3258:	dc 90       	ld	r13, X
    325a:	17 97       	sbiw	r26, 0x07	; 7
    325c:	ec 80       	ldd	r14, Y+4	; 0x04
    325e:	fd 80       	ldd	r15, Y+5	; 0x05
    3260:	0e 81       	ldd	r16, Y+6	; 0x06
    3262:	1f 81       	ldd	r17, Y+7	; 0x07
    3264:	91 01       	movw	r18, r2
    3266:	28 1b       	sub	r18, r24
    3268:	39 0b       	sbc	r19, r25
    326a:	b9 01       	movw	r22, r18
    326c:	37 ff       	sbrs	r19, 7
    326e:	04 c0       	rjmp	.+8      	; 0x3278 <_fpadd_parts+0xb2>
    3270:	66 27       	eor	r22, r22
    3272:	77 27       	eor	r23, r23
    3274:	62 1b       	sub	r22, r18
    3276:	73 0b       	sbc	r23, r19
    3278:	60 32       	cpi	r22, 0x20	; 32
    327a:	71 05       	cpc	r23, r1
    327c:	0c f0       	brlt	.+2      	; 0x3280 <_fpadd_parts+0xba>
    327e:	61 c0       	rjmp	.+194    	; 0x3342 <_fpadd_parts+0x17c>
    3280:	12 16       	cp	r1, r18
    3282:	13 06       	cpc	r1, r19
    3284:	6c f5       	brge	.+90     	; 0x32e0 <_fpadd_parts+0x11a>
    3286:	37 01       	movw	r6, r14
    3288:	48 01       	movw	r8, r16
    328a:	06 2e       	mov	r0, r22
    328c:	04 c0       	rjmp	.+8      	; 0x3296 <_fpadd_parts+0xd0>
    328e:	96 94       	lsr	r9
    3290:	87 94       	ror	r8
    3292:	77 94       	ror	r7
    3294:	67 94       	ror	r6
    3296:	0a 94       	dec	r0
    3298:	d2 f7       	brpl	.-12     	; 0x328e <_fpadd_parts+0xc8>
    329a:	21 e0       	ldi	r18, 0x01	; 1
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	04 c0       	rjmp	.+8      	; 0x32ac <_fpadd_parts+0xe6>
    32a4:	22 0f       	add	r18, r18
    32a6:	33 1f       	adc	r19, r19
    32a8:	44 1f       	adc	r20, r20
    32aa:	55 1f       	adc	r21, r21
    32ac:	6a 95       	dec	r22
    32ae:	d2 f7       	brpl	.-12     	; 0x32a4 <_fpadd_parts+0xde>
    32b0:	21 50       	subi	r18, 0x01	; 1
    32b2:	30 40       	sbci	r19, 0x00	; 0
    32b4:	40 40       	sbci	r20, 0x00	; 0
    32b6:	50 40       	sbci	r21, 0x00	; 0
    32b8:	2e 21       	and	r18, r14
    32ba:	3f 21       	and	r19, r15
    32bc:	40 23       	and	r20, r16
    32be:	51 23       	and	r21, r17
    32c0:	21 15       	cp	r18, r1
    32c2:	31 05       	cpc	r19, r1
    32c4:	41 05       	cpc	r20, r1
    32c6:	51 05       	cpc	r21, r1
    32c8:	21 f0       	breq	.+8      	; 0x32d2 <_fpadd_parts+0x10c>
    32ca:	21 e0       	ldi	r18, 0x01	; 1
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e0       	ldi	r20, 0x00	; 0
    32d0:	50 e0       	ldi	r21, 0x00	; 0
    32d2:	79 01       	movw	r14, r18
    32d4:	8a 01       	movw	r16, r20
    32d6:	e6 28       	or	r14, r6
    32d8:	f7 28       	or	r15, r7
    32da:	08 29       	or	r16, r8
    32dc:	19 29       	or	r17, r9
    32de:	3c c0       	rjmp	.+120    	; 0x3358 <_fpadd_parts+0x192>
    32e0:	23 2b       	or	r18, r19
    32e2:	d1 f1       	breq	.+116    	; 0x3358 <_fpadd_parts+0x192>
    32e4:	26 0e       	add	r2, r22
    32e6:	37 1e       	adc	r3, r23
    32e8:	35 01       	movw	r6, r10
    32ea:	46 01       	movw	r8, r12
    32ec:	06 2e       	mov	r0, r22
    32ee:	04 c0       	rjmp	.+8      	; 0x32f8 <_fpadd_parts+0x132>
    32f0:	96 94       	lsr	r9
    32f2:	87 94       	ror	r8
    32f4:	77 94       	ror	r7
    32f6:	67 94       	ror	r6
    32f8:	0a 94       	dec	r0
    32fa:	d2 f7       	brpl	.-12     	; 0x32f0 <_fpadd_parts+0x12a>
    32fc:	21 e0       	ldi	r18, 0x01	; 1
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	04 c0       	rjmp	.+8      	; 0x330e <_fpadd_parts+0x148>
    3306:	22 0f       	add	r18, r18
    3308:	33 1f       	adc	r19, r19
    330a:	44 1f       	adc	r20, r20
    330c:	55 1f       	adc	r21, r21
    330e:	6a 95       	dec	r22
    3310:	d2 f7       	brpl	.-12     	; 0x3306 <_fpadd_parts+0x140>
    3312:	21 50       	subi	r18, 0x01	; 1
    3314:	30 40       	sbci	r19, 0x00	; 0
    3316:	40 40       	sbci	r20, 0x00	; 0
    3318:	50 40       	sbci	r21, 0x00	; 0
    331a:	2a 21       	and	r18, r10
    331c:	3b 21       	and	r19, r11
    331e:	4c 21       	and	r20, r12
    3320:	5d 21       	and	r21, r13
    3322:	21 15       	cp	r18, r1
    3324:	31 05       	cpc	r19, r1
    3326:	41 05       	cpc	r20, r1
    3328:	51 05       	cpc	r21, r1
    332a:	21 f0       	breq	.+8      	; 0x3334 <_fpadd_parts+0x16e>
    332c:	21 e0       	ldi	r18, 0x01	; 1
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	40 e0       	ldi	r20, 0x00	; 0
    3332:	50 e0       	ldi	r21, 0x00	; 0
    3334:	59 01       	movw	r10, r18
    3336:	6a 01       	movw	r12, r20
    3338:	a6 28       	or	r10, r6
    333a:	b7 28       	or	r11, r7
    333c:	c8 28       	or	r12, r8
    333e:	d9 28       	or	r13, r9
    3340:	0b c0       	rjmp	.+22     	; 0x3358 <_fpadd_parts+0x192>
    3342:	82 15       	cp	r24, r2
    3344:	93 05       	cpc	r25, r3
    3346:	2c f0       	brlt	.+10     	; 0x3352 <_fpadd_parts+0x18c>
    3348:	1c 01       	movw	r2, r24
    334a:	aa 24       	eor	r10, r10
    334c:	bb 24       	eor	r11, r11
    334e:	65 01       	movw	r12, r10
    3350:	03 c0       	rjmp	.+6      	; 0x3358 <_fpadd_parts+0x192>
    3352:	ee 24       	eor	r14, r14
    3354:	ff 24       	eor	r15, r15
    3356:	87 01       	movw	r16, r14
    3358:	11 96       	adiw	r26, 0x01	; 1
    335a:	9c 91       	ld	r25, X
    335c:	d2 01       	movw	r26, r4
    335e:	11 96       	adiw	r26, 0x01	; 1
    3360:	8c 91       	ld	r24, X
    3362:	98 17       	cp	r25, r24
    3364:	09 f4       	brne	.+2      	; 0x3368 <_fpadd_parts+0x1a2>
    3366:	45 c0       	rjmp	.+138    	; 0x33f2 <_fpadd_parts+0x22c>
    3368:	99 23       	and	r25, r25
    336a:	39 f0       	breq	.+14     	; 0x337a <_fpadd_parts+0x1b4>
    336c:	a8 01       	movw	r20, r16
    336e:	97 01       	movw	r18, r14
    3370:	2a 19       	sub	r18, r10
    3372:	3b 09       	sbc	r19, r11
    3374:	4c 09       	sbc	r20, r12
    3376:	5d 09       	sbc	r21, r13
    3378:	06 c0       	rjmp	.+12     	; 0x3386 <_fpadd_parts+0x1c0>
    337a:	a6 01       	movw	r20, r12
    337c:	95 01       	movw	r18, r10
    337e:	2e 19       	sub	r18, r14
    3380:	3f 09       	sbc	r19, r15
    3382:	40 0b       	sbc	r20, r16
    3384:	51 0b       	sbc	r21, r17
    3386:	57 fd       	sbrc	r21, 7
    3388:	08 c0       	rjmp	.+16     	; 0x339a <_fpadd_parts+0x1d4>
    338a:	11 82       	std	Z+1, r1	; 0x01
    338c:	33 82       	std	Z+3, r3	; 0x03
    338e:	22 82       	std	Z+2, r2	; 0x02
    3390:	24 83       	std	Z+4, r18	; 0x04
    3392:	35 83       	std	Z+5, r19	; 0x05
    3394:	46 83       	std	Z+6, r20	; 0x06
    3396:	57 83       	std	Z+7, r21	; 0x07
    3398:	1d c0       	rjmp	.+58     	; 0x33d4 <_fpadd_parts+0x20e>
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	81 83       	std	Z+1, r24	; 0x01
    339e:	33 82       	std	Z+3, r3	; 0x03
    33a0:	22 82       	std	Z+2, r2	; 0x02
    33a2:	88 27       	eor	r24, r24
    33a4:	99 27       	eor	r25, r25
    33a6:	dc 01       	movw	r26, r24
    33a8:	82 1b       	sub	r24, r18
    33aa:	93 0b       	sbc	r25, r19
    33ac:	a4 0b       	sbc	r26, r20
    33ae:	b5 0b       	sbc	r27, r21
    33b0:	84 83       	std	Z+4, r24	; 0x04
    33b2:	95 83       	std	Z+5, r25	; 0x05
    33b4:	a6 83       	std	Z+6, r26	; 0x06
    33b6:	b7 83       	std	Z+7, r27	; 0x07
    33b8:	0d c0       	rjmp	.+26     	; 0x33d4 <_fpadd_parts+0x20e>
    33ba:	22 0f       	add	r18, r18
    33bc:	33 1f       	adc	r19, r19
    33be:	44 1f       	adc	r20, r20
    33c0:	55 1f       	adc	r21, r21
    33c2:	24 83       	std	Z+4, r18	; 0x04
    33c4:	35 83       	std	Z+5, r19	; 0x05
    33c6:	46 83       	std	Z+6, r20	; 0x06
    33c8:	57 83       	std	Z+7, r21	; 0x07
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	93 81       	ldd	r25, Z+3	; 0x03
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	93 83       	std	Z+3, r25	; 0x03
    33d2:	82 83       	std	Z+2, r24	; 0x02
    33d4:	24 81       	ldd	r18, Z+4	; 0x04
    33d6:	35 81       	ldd	r19, Z+5	; 0x05
    33d8:	46 81       	ldd	r20, Z+6	; 0x06
    33da:	57 81       	ldd	r21, Z+7	; 0x07
    33dc:	da 01       	movw	r26, r20
    33de:	c9 01       	movw	r24, r18
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	a1 09       	sbc	r26, r1
    33e4:	b1 09       	sbc	r27, r1
    33e6:	8f 5f       	subi	r24, 0xFF	; 255
    33e8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ea:	af 4f       	sbci	r26, 0xFF	; 255
    33ec:	bf 43       	sbci	r27, 0x3F	; 63
    33ee:	28 f3       	brcs	.-54     	; 0x33ba <_fpadd_parts+0x1f4>
    33f0:	0b c0       	rjmp	.+22     	; 0x3408 <_fpadd_parts+0x242>
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	33 82       	std	Z+3, r3	; 0x03
    33f6:	22 82       	std	Z+2, r2	; 0x02
    33f8:	ea 0c       	add	r14, r10
    33fa:	fb 1c       	adc	r15, r11
    33fc:	0c 1d       	adc	r16, r12
    33fe:	1d 1d       	adc	r17, r13
    3400:	e4 82       	std	Z+4, r14	; 0x04
    3402:	f5 82       	std	Z+5, r15	; 0x05
    3404:	06 83       	std	Z+6, r16	; 0x06
    3406:	17 83       	std	Z+7, r17	; 0x07
    3408:	83 e0       	ldi	r24, 0x03	; 3
    340a:	80 83       	st	Z, r24
    340c:	24 81       	ldd	r18, Z+4	; 0x04
    340e:	35 81       	ldd	r19, Z+5	; 0x05
    3410:	46 81       	ldd	r20, Z+6	; 0x06
    3412:	57 81       	ldd	r21, Z+7	; 0x07
    3414:	57 ff       	sbrs	r21, 7
    3416:	1a c0       	rjmp	.+52     	; 0x344c <_fpadd_parts+0x286>
    3418:	c9 01       	movw	r24, r18
    341a:	aa 27       	eor	r26, r26
    341c:	97 fd       	sbrc	r25, 7
    341e:	a0 95       	com	r26
    3420:	ba 2f       	mov	r27, r26
    3422:	81 70       	andi	r24, 0x01	; 1
    3424:	90 70       	andi	r25, 0x00	; 0
    3426:	a0 70       	andi	r26, 0x00	; 0
    3428:	b0 70       	andi	r27, 0x00	; 0
    342a:	56 95       	lsr	r21
    342c:	47 95       	ror	r20
    342e:	37 95       	ror	r19
    3430:	27 95       	ror	r18
    3432:	82 2b       	or	r24, r18
    3434:	93 2b       	or	r25, r19
    3436:	a4 2b       	or	r26, r20
    3438:	b5 2b       	or	r27, r21
    343a:	84 83       	std	Z+4, r24	; 0x04
    343c:	95 83       	std	Z+5, r25	; 0x05
    343e:	a6 83       	std	Z+6, r26	; 0x06
    3440:	b7 83       	std	Z+7, r27	; 0x07
    3442:	82 81       	ldd	r24, Z+2	; 0x02
    3444:	93 81       	ldd	r25, Z+3	; 0x03
    3446:	01 96       	adiw	r24, 0x01	; 1
    3448:	93 83       	std	Z+3, r25	; 0x03
    344a:	82 83       	std	Z+2, r24	; 0x02
    344c:	df 01       	movw	r26, r30
    344e:	01 c0       	rjmp	.+2      	; 0x3452 <_fpadd_parts+0x28c>
    3450:	d2 01       	movw	r26, r4
    3452:	cd 01       	movw	r24, r26
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	e2 e1       	ldi	r30, 0x12	; 18
    345a:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__epilogue_restores__>

0000345e <__subsf3>:
    345e:	a0 e2       	ldi	r26, 0x20	; 32
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e5 e3       	ldi	r30, 0x35	; 53
    3464:	fa e1       	ldi	r31, 0x1A	; 26
    3466:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__prologue_saves__+0x18>
    346a:	69 83       	std	Y+1, r22	; 0x01
    346c:	7a 83       	std	Y+2, r23	; 0x02
    346e:	8b 83       	std	Y+3, r24	; 0x03
    3470:	9c 83       	std	Y+4, r25	; 0x04
    3472:	2d 83       	std	Y+5, r18	; 0x05
    3474:	3e 83       	std	Y+6, r19	; 0x06
    3476:	4f 83       	std	Y+7, r20	; 0x07
    3478:	58 87       	std	Y+8, r21	; 0x08
    347a:	e9 e0       	ldi	r30, 0x09	; 9
    347c:	ee 2e       	mov	r14, r30
    347e:	f1 2c       	mov	r15, r1
    3480:	ec 0e       	add	r14, r28
    3482:	fd 1e       	adc	r15, r29
    3484:	ce 01       	movw	r24, r28
    3486:	01 96       	adiw	r24, 0x01	; 1
    3488:	b7 01       	movw	r22, r14
    348a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    348e:	8e 01       	movw	r16, r28
    3490:	0f 5e       	subi	r16, 0xEF	; 239
    3492:	1f 4f       	sbci	r17, 0xFF	; 255
    3494:	ce 01       	movw	r24, r28
    3496:	05 96       	adiw	r24, 0x05	; 5
    3498:	b8 01       	movw	r22, r16
    349a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    349e:	8a 89       	ldd	r24, Y+18	; 0x12
    34a0:	91 e0       	ldi	r25, 0x01	; 1
    34a2:	89 27       	eor	r24, r25
    34a4:	8a 8b       	std	Y+18, r24	; 0x12
    34a6:	c7 01       	movw	r24, r14
    34a8:	b8 01       	movw	r22, r16
    34aa:	ae 01       	movw	r20, r28
    34ac:	47 5e       	subi	r20, 0xE7	; 231
    34ae:	5f 4f       	sbci	r21, 0xFF	; 255
    34b0:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <_fpadd_parts>
    34b4:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__pack_f>
    34b8:	a0 96       	adiw	r28, 0x20	; 32
    34ba:	e6 e0       	ldi	r30, 0x06	; 6
    34bc:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__epilogue_restores__+0x18>

000034c0 <__addsf3>:
    34c0:	a0 e2       	ldi	r26, 0x20	; 32
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e6 e6       	ldi	r30, 0x66	; 102
    34c6:	fa e1       	ldi	r31, 0x1A	; 26
    34c8:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__prologue_saves__+0x18>
    34cc:	69 83       	std	Y+1, r22	; 0x01
    34ce:	7a 83       	std	Y+2, r23	; 0x02
    34d0:	8b 83       	std	Y+3, r24	; 0x03
    34d2:	9c 83       	std	Y+4, r25	; 0x04
    34d4:	2d 83       	std	Y+5, r18	; 0x05
    34d6:	3e 83       	std	Y+6, r19	; 0x06
    34d8:	4f 83       	std	Y+7, r20	; 0x07
    34da:	58 87       	std	Y+8, r21	; 0x08
    34dc:	f9 e0       	ldi	r31, 0x09	; 9
    34de:	ef 2e       	mov	r14, r31
    34e0:	f1 2c       	mov	r15, r1
    34e2:	ec 0e       	add	r14, r28
    34e4:	fd 1e       	adc	r15, r29
    34e6:	ce 01       	movw	r24, r28
    34e8:	01 96       	adiw	r24, 0x01	; 1
    34ea:	b7 01       	movw	r22, r14
    34ec:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    34f0:	8e 01       	movw	r16, r28
    34f2:	0f 5e       	subi	r16, 0xEF	; 239
    34f4:	1f 4f       	sbci	r17, 0xFF	; 255
    34f6:	ce 01       	movw	r24, r28
    34f8:	05 96       	adiw	r24, 0x05	; 5
    34fa:	b8 01       	movw	r22, r16
    34fc:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    3500:	c7 01       	movw	r24, r14
    3502:	b8 01       	movw	r22, r16
    3504:	ae 01       	movw	r20, r28
    3506:	47 5e       	subi	r20, 0xE7	; 231
    3508:	5f 4f       	sbci	r21, 0xFF	; 255
    350a:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <_fpadd_parts>
    350e:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__pack_f>
    3512:	a0 96       	adiw	r28, 0x20	; 32
    3514:	e6 e0       	ldi	r30, 0x06	; 6
    3516:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__epilogue_restores__+0x18>

0000351a <__mulsf3>:
    351a:	a0 e2       	ldi	r26, 0x20	; 32
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	e3 e9       	ldi	r30, 0x93	; 147
    3520:	fa e1       	ldi	r31, 0x1A	; 26
    3522:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__prologue_saves__>
    3526:	69 83       	std	Y+1, r22	; 0x01
    3528:	7a 83       	std	Y+2, r23	; 0x02
    352a:	8b 83       	std	Y+3, r24	; 0x03
    352c:	9c 83       	std	Y+4, r25	; 0x04
    352e:	2d 83       	std	Y+5, r18	; 0x05
    3530:	3e 83       	std	Y+6, r19	; 0x06
    3532:	4f 83       	std	Y+7, r20	; 0x07
    3534:	58 87       	std	Y+8, r21	; 0x08
    3536:	ce 01       	movw	r24, r28
    3538:	01 96       	adiw	r24, 0x01	; 1
    353a:	be 01       	movw	r22, r28
    353c:	67 5f       	subi	r22, 0xF7	; 247
    353e:	7f 4f       	sbci	r23, 0xFF	; 255
    3540:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    3544:	ce 01       	movw	r24, r28
    3546:	05 96       	adiw	r24, 0x05	; 5
    3548:	be 01       	movw	r22, r28
    354a:	6f 5e       	subi	r22, 0xEF	; 239
    354c:	7f 4f       	sbci	r23, 0xFF	; 255
    354e:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    3552:	99 85       	ldd	r25, Y+9	; 0x09
    3554:	92 30       	cpi	r25, 0x02	; 2
    3556:	88 f0       	brcs	.+34     	; 0x357a <__mulsf3+0x60>
    3558:	89 89       	ldd	r24, Y+17	; 0x11
    355a:	82 30       	cpi	r24, 0x02	; 2
    355c:	c8 f0       	brcs	.+50     	; 0x3590 <__mulsf3+0x76>
    355e:	94 30       	cpi	r25, 0x04	; 4
    3560:	19 f4       	brne	.+6      	; 0x3568 <__mulsf3+0x4e>
    3562:	82 30       	cpi	r24, 0x02	; 2
    3564:	51 f4       	brne	.+20     	; 0x357a <__mulsf3+0x60>
    3566:	04 c0       	rjmp	.+8      	; 0x3570 <__mulsf3+0x56>
    3568:	84 30       	cpi	r24, 0x04	; 4
    356a:	29 f4       	brne	.+10     	; 0x3576 <__mulsf3+0x5c>
    356c:	92 30       	cpi	r25, 0x02	; 2
    356e:	81 f4       	brne	.+32     	; 0x3590 <__mulsf3+0x76>
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	92 e0       	ldi	r25, 0x02	; 2
    3574:	c6 c0       	rjmp	.+396    	; 0x3702 <__mulsf3+0x1e8>
    3576:	92 30       	cpi	r25, 0x02	; 2
    3578:	49 f4       	brne	.+18     	; 0x358c <__mulsf3+0x72>
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	9a 85       	ldd	r25, Y+10	; 0x0a
    357e:	8a 89       	ldd	r24, Y+18	; 0x12
    3580:	98 13       	cpse	r25, r24
    3582:	21 e0       	ldi	r18, 0x01	; 1
    3584:	2a 87       	std	Y+10, r18	; 0x0a
    3586:	ce 01       	movw	r24, r28
    3588:	09 96       	adiw	r24, 0x09	; 9
    358a:	bb c0       	rjmp	.+374    	; 0x3702 <__mulsf3+0x1e8>
    358c:	82 30       	cpi	r24, 0x02	; 2
    358e:	49 f4       	brne	.+18     	; 0x35a2 <__mulsf3+0x88>
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	9a 85       	ldd	r25, Y+10	; 0x0a
    3594:	8a 89       	ldd	r24, Y+18	; 0x12
    3596:	98 13       	cpse	r25, r24
    3598:	21 e0       	ldi	r18, 0x01	; 1
    359a:	2a 8b       	std	Y+18, r18	; 0x12
    359c:	ce 01       	movw	r24, r28
    359e:	41 96       	adiw	r24, 0x11	; 17
    35a0:	b0 c0       	rjmp	.+352    	; 0x3702 <__mulsf3+0x1e8>
    35a2:	2d 84       	ldd	r2, Y+13	; 0x0d
    35a4:	3e 84       	ldd	r3, Y+14	; 0x0e
    35a6:	4f 84       	ldd	r4, Y+15	; 0x0f
    35a8:	58 88       	ldd	r5, Y+16	; 0x10
    35aa:	6d 88       	ldd	r6, Y+21	; 0x15
    35ac:	7e 88       	ldd	r7, Y+22	; 0x16
    35ae:	8f 88       	ldd	r8, Y+23	; 0x17
    35b0:	98 8c       	ldd	r9, Y+24	; 0x18
    35b2:	ee 24       	eor	r14, r14
    35b4:	ff 24       	eor	r15, r15
    35b6:	87 01       	movw	r16, r14
    35b8:	aa 24       	eor	r10, r10
    35ba:	bb 24       	eor	r11, r11
    35bc:	65 01       	movw	r12, r10
    35be:	40 e0       	ldi	r20, 0x00	; 0
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	70 e0       	ldi	r23, 0x00	; 0
    35c6:	e0 e0       	ldi	r30, 0x00	; 0
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	c1 01       	movw	r24, r2
    35cc:	81 70       	andi	r24, 0x01	; 1
    35ce:	90 70       	andi	r25, 0x00	; 0
    35d0:	89 2b       	or	r24, r25
    35d2:	e9 f0       	breq	.+58     	; 0x360e <__mulsf3+0xf4>
    35d4:	e6 0c       	add	r14, r6
    35d6:	f7 1c       	adc	r15, r7
    35d8:	08 1d       	adc	r16, r8
    35da:	19 1d       	adc	r17, r9
    35dc:	9a 01       	movw	r18, r20
    35de:	ab 01       	movw	r20, r22
    35e0:	2a 0d       	add	r18, r10
    35e2:	3b 1d       	adc	r19, r11
    35e4:	4c 1d       	adc	r20, r12
    35e6:	5d 1d       	adc	r21, r13
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	a0 e0       	ldi	r26, 0x00	; 0
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e6 14       	cp	r14, r6
    35f2:	f7 04       	cpc	r15, r7
    35f4:	08 05       	cpc	r16, r8
    35f6:	19 05       	cpc	r17, r9
    35f8:	20 f4       	brcc	.+8      	; 0x3602 <__mulsf3+0xe8>
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	a0 e0       	ldi	r26, 0x00	; 0
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	ba 01       	movw	r22, r20
    3604:	a9 01       	movw	r20, r18
    3606:	48 0f       	add	r20, r24
    3608:	59 1f       	adc	r21, r25
    360a:	6a 1f       	adc	r22, r26
    360c:	7b 1f       	adc	r23, r27
    360e:	aa 0c       	add	r10, r10
    3610:	bb 1c       	adc	r11, r11
    3612:	cc 1c       	adc	r12, r12
    3614:	dd 1c       	adc	r13, r13
    3616:	97 fe       	sbrs	r9, 7
    3618:	08 c0       	rjmp	.+16     	; 0x362a <__mulsf3+0x110>
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	a0 e0       	ldi	r26, 0x00	; 0
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	a8 2a       	or	r10, r24
    3624:	b9 2a       	or	r11, r25
    3626:	ca 2a       	or	r12, r26
    3628:	db 2a       	or	r13, r27
    362a:	31 96       	adiw	r30, 0x01	; 1
    362c:	e0 32       	cpi	r30, 0x20	; 32
    362e:	f1 05       	cpc	r31, r1
    3630:	49 f0       	breq	.+18     	; 0x3644 <__mulsf3+0x12a>
    3632:	66 0c       	add	r6, r6
    3634:	77 1c       	adc	r7, r7
    3636:	88 1c       	adc	r8, r8
    3638:	99 1c       	adc	r9, r9
    363a:	56 94       	lsr	r5
    363c:	47 94       	ror	r4
    363e:	37 94       	ror	r3
    3640:	27 94       	ror	r2
    3642:	c3 cf       	rjmp	.-122    	; 0x35ca <__mulsf3+0xb0>
    3644:	fa 85       	ldd	r31, Y+10	; 0x0a
    3646:	ea 89       	ldd	r30, Y+18	; 0x12
    3648:	2b 89       	ldd	r18, Y+19	; 0x13
    364a:	3c 89       	ldd	r19, Y+20	; 0x14
    364c:	8b 85       	ldd	r24, Y+11	; 0x0b
    364e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3650:	28 0f       	add	r18, r24
    3652:	39 1f       	adc	r19, r25
    3654:	2e 5f       	subi	r18, 0xFE	; 254
    3656:	3f 4f       	sbci	r19, 0xFF	; 255
    3658:	17 c0       	rjmp	.+46     	; 0x3688 <__mulsf3+0x16e>
    365a:	ca 01       	movw	r24, r20
    365c:	81 70       	andi	r24, 0x01	; 1
    365e:	90 70       	andi	r25, 0x00	; 0
    3660:	89 2b       	or	r24, r25
    3662:	61 f0       	breq	.+24     	; 0x367c <__mulsf3+0x162>
    3664:	16 95       	lsr	r17
    3666:	07 95       	ror	r16
    3668:	f7 94       	ror	r15
    366a:	e7 94       	ror	r14
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	a0 e0       	ldi	r26, 0x00	; 0
    3672:	b0 e8       	ldi	r27, 0x80	; 128
    3674:	e8 2a       	or	r14, r24
    3676:	f9 2a       	or	r15, r25
    3678:	0a 2b       	or	r16, r26
    367a:	1b 2b       	or	r17, r27
    367c:	76 95       	lsr	r23
    367e:	67 95       	ror	r22
    3680:	57 95       	ror	r21
    3682:	47 95       	ror	r20
    3684:	2f 5f       	subi	r18, 0xFF	; 255
    3686:	3f 4f       	sbci	r19, 0xFF	; 255
    3688:	77 fd       	sbrc	r23, 7
    368a:	e7 cf       	rjmp	.-50     	; 0x365a <__mulsf3+0x140>
    368c:	0c c0       	rjmp	.+24     	; 0x36a6 <__mulsf3+0x18c>
    368e:	44 0f       	add	r20, r20
    3690:	55 1f       	adc	r21, r21
    3692:	66 1f       	adc	r22, r22
    3694:	77 1f       	adc	r23, r23
    3696:	17 fd       	sbrc	r17, 7
    3698:	41 60       	ori	r20, 0x01	; 1
    369a:	ee 0c       	add	r14, r14
    369c:	ff 1c       	adc	r15, r15
    369e:	00 1f       	adc	r16, r16
    36a0:	11 1f       	adc	r17, r17
    36a2:	21 50       	subi	r18, 0x01	; 1
    36a4:	30 40       	sbci	r19, 0x00	; 0
    36a6:	40 30       	cpi	r20, 0x00	; 0
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	59 07       	cpc	r21, r25
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	69 07       	cpc	r22, r25
    36b0:	90 e4       	ldi	r25, 0x40	; 64
    36b2:	79 07       	cpc	r23, r25
    36b4:	60 f3       	brcs	.-40     	; 0x368e <__mulsf3+0x174>
    36b6:	2b 8f       	std	Y+27, r18	; 0x1b
    36b8:	3c 8f       	std	Y+28, r19	; 0x1c
    36ba:	db 01       	movw	r26, r22
    36bc:	ca 01       	movw	r24, r20
    36be:	8f 77       	andi	r24, 0x7F	; 127
    36c0:	90 70       	andi	r25, 0x00	; 0
    36c2:	a0 70       	andi	r26, 0x00	; 0
    36c4:	b0 70       	andi	r27, 0x00	; 0
    36c6:	80 34       	cpi	r24, 0x40	; 64
    36c8:	91 05       	cpc	r25, r1
    36ca:	a1 05       	cpc	r26, r1
    36cc:	b1 05       	cpc	r27, r1
    36ce:	61 f4       	brne	.+24     	; 0x36e8 <__mulsf3+0x1ce>
    36d0:	47 fd       	sbrc	r20, 7
    36d2:	0a c0       	rjmp	.+20     	; 0x36e8 <__mulsf3+0x1ce>
    36d4:	e1 14       	cp	r14, r1
    36d6:	f1 04       	cpc	r15, r1
    36d8:	01 05       	cpc	r16, r1
    36da:	11 05       	cpc	r17, r1
    36dc:	29 f0       	breq	.+10     	; 0x36e8 <__mulsf3+0x1ce>
    36de:	40 5c       	subi	r20, 0xC0	; 192
    36e0:	5f 4f       	sbci	r21, 0xFF	; 255
    36e2:	6f 4f       	sbci	r22, 0xFF	; 255
    36e4:	7f 4f       	sbci	r23, 0xFF	; 255
    36e6:	40 78       	andi	r20, 0x80	; 128
    36e8:	1a 8e       	std	Y+26, r1	; 0x1a
    36ea:	fe 17       	cp	r31, r30
    36ec:	11 f0       	breq	.+4      	; 0x36f2 <__mulsf3+0x1d8>
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	8a 8f       	std	Y+26, r24	; 0x1a
    36f2:	4d 8f       	std	Y+29, r20	; 0x1d
    36f4:	5e 8f       	std	Y+30, r21	; 0x1e
    36f6:	6f 8f       	std	Y+31, r22	; 0x1f
    36f8:	78 a3       	std	Y+32, r23	; 0x20
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	89 8f       	std	Y+25, r24	; 0x19
    36fe:	ce 01       	movw	r24, r28
    3700:	49 96       	adiw	r24, 0x19	; 25
    3702:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__pack_f>
    3706:	a0 96       	adiw	r28, 0x20	; 32
    3708:	e2 e1       	ldi	r30, 0x12	; 18
    370a:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__epilogue_restores__>

0000370e <__divsf3>:
    370e:	a8 e1       	ldi	r26, 0x18	; 24
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	ed e8       	ldi	r30, 0x8D	; 141
    3714:	fb e1       	ldi	r31, 0x1B	; 27
    3716:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__prologue_saves__+0x10>
    371a:	69 83       	std	Y+1, r22	; 0x01
    371c:	7a 83       	std	Y+2, r23	; 0x02
    371e:	8b 83       	std	Y+3, r24	; 0x03
    3720:	9c 83       	std	Y+4, r25	; 0x04
    3722:	2d 83       	std	Y+5, r18	; 0x05
    3724:	3e 83       	std	Y+6, r19	; 0x06
    3726:	4f 83       	std	Y+7, r20	; 0x07
    3728:	58 87       	std	Y+8, r21	; 0x08
    372a:	b9 e0       	ldi	r27, 0x09	; 9
    372c:	eb 2e       	mov	r14, r27
    372e:	f1 2c       	mov	r15, r1
    3730:	ec 0e       	add	r14, r28
    3732:	fd 1e       	adc	r15, r29
    3734:	ce 01       	movw	r24, r28
    3736:	01 96       	adiw	r24, 0x01	; 1
    3738:	b7 01       	movw	r22, r14
    373a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    373e:	8e 01       	movw	r16, r28
    3740:	0f 5e       	subi	r16, 0xEF	; 239
    3742:	1f 4f       	sbci	r17, 0xFF	; 255
    3744:	ce 01       	movw	r24, r28
    3746:	05 96       	adiw	r24, 0x05	; 5
    3748:	b8 01       	movw	r22, r16
    374a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    374e:	29 85       	ldd	r18, Y+9	; 0x09
    3750:	22 30       	cpi	r18, 0x02	; 2
    3752:	08 f4       	brcc	.+2      	; 0x3756 <__divsf3+0x48>
    3754:	7e c0       	rjmp	.+252    	; 0x3852 <__divsf3+0x144>
    3756:	39 89       	ldd	r19, Y+17	; 0x11
    3758:	32 30       	cpi	r19, 0x02	; 2
    375a:	10 f4       	brcc	.+4      	; 0x3760 <__divsf3+0x52>
    375c:	b8 01       	movw	r22, r16
    375e:	7c c0       	rjmp	.+248    	; 0x3858 <__divsf3+0x14a>
    3760:	8a 85       	ldd	r24, Y+10	; 0x0a
    3762:	9a 89       	ldd	r25, Y+18	; 0x12
    3764:	89 27       	eor	r24, r25
    3766:	8a 87       	std	Y+10, r24	; 0x0a
    3768:	24 30       	cpi	r18, 0x04	; 4
    376a:	11 f0       	breq	.+4      	; 0x3770 <__divsf3+0x62>
    376c:	22 30       	cpi	r18, 0x02	; 2
    376e:	31 f4       	brne	.+12     	; 0x377c <__divsf3+0x6e>
    3770:	23 17       	cp	r18, r19
    3772:	09 f0       	breq	.+2      	; 0x3776 <__divsf3+0x68>
    3774:	6e c0       	rjmp	.+220    	; 0x3852 <__divsf3+0x144>
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	72 e0       	ldi	r23, 0x02	; 2
    377a:	6e c0       	rjmp	.+220    	; 0x3858 <__divsf3+0x14a>
    377c:	34 30       	cpi	r19, 0x04	; 4
    377e:	39 f4       	brne	.+14     	; 0x378e <__divsf3+0x80>
    3780:	1d 86       	std	Y+13, r1	; 0x0d
    3782:	1e 86       	std	Y+14, r1	; 0x0e
    3784:	1f 86       	std	Y+15, r1	; 0x0f
    3786:	18 8a       	std	Y+16, r1	; 0x10
    3788:	1c 86       	std	Y+12, r1	; 0x0c
    378a:	1b 86       	std	Y+11, r1	; 0x0b
    378c:	04 c0       	rjmp	.+8      	; 0x3796 <__divsf3+0x88>
    378e:	32 30       	cpi	r19, 0x02	; 2
    3790:	21 f4       	brne	.+8      	; 0x379a <__divsf3+0x8c>
    3792:	84 e0       	ldi	r24, 0x04	; 4
    3794:	89 87       	std	Y+9, r24	; 0x09
    3796:	b7 01       	movw	r22, r14
    3798:	5f c0       	rjmp	.+190    	; 0x3858 <__divsf3+0x14a>
    379a:	2b 85       	ldd	r18, Y+11	; 0x0b
    379c:	3c 85       	ldd	r19, Y+12	; 0x0c
    379e:	8b 89       	ldd	r24, Y+19	; 0x13
    37a0:	9c 89       	ldd	r25, Y+20	; 0x14
    37a2:	28 1b       	sub	r18, r24
    37a4:	39 0b       	sbc	r19, r25
    37a6:	3c 87       	std	Y+12, r19	; 0x0c
    37a8:	2b 87       	std	Y+11, r18	; 0x0b
    37aa:	ed 84       	ldd	r14, Y+13	; 0x0d
    37ac:	fe 84       	ldd	r15, Y+14	; 0x0e
    37ae:	0f 85       	ldd	r16, Y+15	; 0x0f
    37b0:	18 89       	ldd	r17, Y+16	; 0x10
    37b2:	ad 88       	ldd	r10, Y+21	; 0x15
    37b4:	be 88       	ldd	r11, Y+22	; 0x16
    37b6:	cf 88       	ldd	r12, Y+23	; 0x17
    37b8:	d8 8c       	ldd	r13, Y+24	; 0x18
    37ba:	ea 14       	cp	r14, r10
    37bc:	fb 04       	cpc	r15, r11
    37be:	0c 05       	cpc	r16, r12
    37c0:	1d 05       	cpc	r17, r13
    37c2:	40 f4       	brcc	.+16     	; 0x37d4 <__divsf3+0xc6>
    37c4:	ee 0c       	add	r14, r14
    37c6:	ff 1c       	adc	r15, r15
    37c8:	00 1f       	adc	r16, r16
    37ca:	11 1f       	adc	r17, r17
    37cc:	21 50       	subi	r18, 0x01	; 1
    37ce:	30 40       	sbci	r19, 0x00	; 0
    37d0:	3c 87       	std	Y+12, r19	; 0x0c
    37d2:	2b 87       	std	Y+11, r18	; 0x0b
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	a0 e0       	ldi	r26, 0x00	; 0
    37e2:	b0 e4       	ldi	r27, 0x40	; 64
    37e4:	60 e0       	ldi	r22, 0x00	; 0
    37e6:	70 e0       	ldi	r23, 0x00	; 0
    37e8:	ea 14       	cp	r14, r10
    37ea:	fb 04       	cpc	r15, r11
    37ec:	0c 05       	cpc	r16, r12
    37ee:	1d 05       	cpc	r17, r13
    37f0:	40 f0       	brcs	.+16     	; 0x3802 <__divsf3+0xf4>
    37f2:	28 2b       	or	r18, r24
    37f4:	39 2b       	or	r19, r25
    37f6:	4a 2b       	or	r20, r26
    37f8:	5b 2b       	or	r21, r27
    37fa:	ea 18       	sub	r14, r10
    37fc:	fb 08       	sbc	r15, r11
    37fe:	0c 09       	sbc	r16, r12
    3800:	1d 09       	sbc	r17, r13
    3802:	b6 95       	lsr	r27
    3804:	a7 95       	ror	r26
    3806:	97 95       	ror	r25
    3808:	87 95       	ror	r24
    380a:	ee 0c       	add	r14, r14
    380c:	ff 1c       	adc	r15, r15
    380e:	00 1f       	adc	r16, r16
    3810:	11 1f       	adc	r17, r17
    3812:	6f 5f       	subi	r22, 0xFF	; 255
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	6f 31       	cpi	r22, 0x1F	; 31
    3818:	71 05       	cpc	r23, r1
    381a:	31 f7       	brne	.-52     	; 0x37e8 <__divsf3+0xda>
    381c:	da 01       	movw	r26, r20
    381e:	c9 01       	movw	r24, r18
    3820:	8f 77       	andi	r24, 0x7F	; 127
    3822:	90 70       	andi	r25, 0x00	; 0
    3824:	a0 70       	andi	r26, 0x00	; 0
    3826:	b0 70       	andi	r27, 0x00	; 0
    3828:	80 34       	cpi	r24, 0x40	; 64
    382a:	91 05       	cpc	r25, r1
    382c:	a1 05       	cpc	r26, r1
    382e:	b1 05       	cpc	r27, r1
    3830:	61 f4       	brne	.+24     	; 0x384a <__divsf3+0x13c>
    3832:	27 fd       	sbrc	r18, 7
    3834:	0a c0       	rjmp	.+20     	; 0x384a <__divsf3+0x13c>
    3836:	e1 14       	cp	r14, r1
    3838:	f1 04       	cpc	r15, r1
    383a:	01 05       	cpc	r16, r1
    383c:	11 05       	cpc	r17, r1
    383e:	29 f0       	breq	.+10     	; 0x384a <__divsf3+0x13c>
    3840:	20 5c       	subi	r18, 0xC0	; 192
    3842:	3f 4f       	sbci	r19, 0xFF	; 255
    3844:	4f 4f       	sbci	r20, 0xFF	; 255
    3846:	5f 4f       	sbci	r21, 0xFF	; 255
    3848:	20 78       	andi	r18, 0x80	; 128
    384a:	2d 87       	std	Y+13, r18	; 0x0d
    384c:	3e 87       	std	Y+14, r19	; 0x0e
    384e:	4f 87       	std	Y+15, r20	; 0x0f
    3850:	58 8b       	std	Y+16, r21	; 0x10
    3852:	be 01       	movw	r22, r28
    3854:	67 5f       	subi	r22, 0xF7	; 247
    3856:	7f 4f       	sbci	r23, 0xFF	; 255
    3858:	cb 01       	movw	r24, r22
    385a:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__pack_f>
    385e:	68 96       	adiw	r28, 0x18	; 24
    3860:	ea e0       	ldi	r30, 0x0A	; 10
    3862:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__epilogue_restores__+0x10>

00003866 <__gtsf2>:
    3866:	a8 e1       	ldi	r26, 0x18	; 24
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	e9 e3       	ldi	r30, 0x39	; 57
    386c:	fc e1       	ldi	r31, 0x1C	; 28
    386e:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__prologue_saves__+0x18>
    3872:	69 83       	std	Y+1, r22	; 0x01
    3874:	7a 83       	std	Y+2, r23	; 0x02
    3876:	8b 83       	std	Y+3, r24	; 0x03
    3878:	9c 83       	std	Y+4, r25	; 0x04
    387a:	2d 83       	std	Y+5, r18	; 0x05
    387c:	3e 83       	std	Y+6, r19	; 0x06
    387e:	4f 83       	std	Y+7, r20	; 0x07
    3880:	58 87       	std	Y+8, r21	; 0x08
    3882:	89 e0       	ldi	r24, 0x09	; 9
    3884:	e8 2e       	mov	r14, r24
    3886:	f1 2c       	mov	r15, r1
    3888:	ec 0e       	add	r14, r28
    388a:	fd 1e       	adc	r15, r29
    388c:	ce 01       	movw	r24, r28
    388e:	01 96       	adiw	r24, 0x01	; 1
    3890:	b7 01       	movw	r22, r14
    3892:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    3896:	8e 01       	movw	r16, r28
    3898:	0f 5e       	subi	r16, 0xEF	; 239
    389a:	1f 4f       	sbci	r17, 0xFF	; 255
    389c:	ce 01       	movw	r24, r28
    389e:	05 96       	adiw	r24, 0x05	; 5
    38a0:	b8 01       	movw	r22, r16
    38a2:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    38a6:	89 85       	ldd	r24, Y+9	; 0x09
    38a8:	82 30       	cpi	r24, 0x02	; 2
    38aa:	40 f0       	brcs	.+16     	; 0x38bc <__gtsf2+0x56>
    38ac:	89 89       	ldd	r24, Y+17	; 0x11
    38ae:	82 30       	cpi	r24, 0x02	; 2
    38b0:	28 f0       	brcs	.+10     	; 0x38bc <__gtsf2+0x56>
    38b2:	c7 01       	movw	r24, r14
    38b4:	b8 01       	movw	r22, r16
    38b6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__fpcmp_parts_f>
    38ba:	01 c0       	rjmp	.+2      	; 0x38be <__gtsf2+0x58>
    38bc:	8f ef       	ldi	r24, 0xFF	; 255
    38be:	68 96       	adiw	r28, 0x18	; 24
    38c0:	e6 e0       	ldi	r30, 0x06	; 6
    38c2:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__epilogue_restores__+0x18>

000038c6 <__gesf2>:
    38c6:	a8 e1       	ldi	r26, 0x18	; 24
    38c8:	b0 e0       	ldi	r27, 0x00	; 0
    38ca:	e9 e6       	ldi	r30, 0x69	; 105
    38cc:	fc e1       	ldi	r31, 0x1C	; 28
    38ce:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__prologue_saves__+0x18>
    38d2:	69 83       	std	Y+1, r22	; 0x01
    38d4:	7a 83       	std	Y+2, r23	; 0x02
    38d6:	8b 83       	std	Y+3, r24	; 0x03
    38d8:	9c 83       	std	Y+4, r25	; 0x04
    38da:	2d 83       	std	Y+5, r18	; 0x05
    38dc:	3e 83       	std	Y+6, r19	; 0x06
    38de:	4f 83       	std	Y+7, r20	; 0x07
    38e0:	58 87       	std	Y+8, r21	; 0x08
    38e2:	89 e0       	ldi	r24, 0x09	; 9
    38e4:	e8 2e       	mov	r14, r24
    38e6:	f1 2c       	mov	r15, r1
    38e8:	ec 0e       	add	r14, r28
    38ea:	fd 1e       	adc	r15, r29
    38ec:	ce 01       	movw	r24, r28
    38ee:	01 96       	adiw	r24, 0x01	; 1
    38f0:	b7 01       	movw	r22, r14
    38f2:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    38f6:	8e 01       	movw	r16, r28
    38f8:	0f 5e       	subi	r16, 0xEF	; 239
    38fa:	1f 4f       	sbci	r17, 0xFF	; 255
    38fc:	ce 01       	movw	r24, r28
    38fe:	05 96       	adiw	r24, 0x05	; 5
    3900:	b8 01       	movw	r22, r16
    3902:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    3906:	89 85       	ldd	r24, Y+9	; 0x09
    3908:	82 30       	cpi	r24, 0x02	; 2
    390a:	40 f0       	brcs	.+16     	; 0x391c <__gesf2+0x56>
    390c:	89 89       	ldd	r24, Y+17	; 0x11
    390e:	82 30       	cpi	r24, 0x02	; 2
    3910:	28 f0       	brcs	.+10     	; 0x391c <__gesf2+0x56>
    3912:	c7 01       	movw	r24, r14
    3914:	b8 01       	movw	r22, r16
    3916:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__fpcmp_parts_f>
    391a:	01 c0       	rjmp	.+2      	; 0x391e <__gesf2+0x58>
    391c:	8f ef       	ldi	r24, 0xFF	; 255
    391e:	68 96       	adiw	r28, 0x18	; 24
    3920:	e6 e0       	ldi	r30, 0x06	; 6
    3922:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__epilogue_restores__+0x18>

00003926 <__ltsf2>:
    3926:	a8 e1       	ldi	r26, 0x18	; 24
    3928:	b0 e0       	ldi	r27, 0x00	; 0
    392a:	e9 e9       	ldi	r30, 0x99	; 153
    392c:	fc e1       	ldi	r31, 0x1C	; 28
    392e:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__prologue_saves__+0x18>
    3932:	69 83       	std	Y+1, r22	; 0x01
    3934:	7a 83       	std	Y+2, r23	; 0x02
    3936:	8b 83       	std	Y+3, r24	; 0x03
    3938:	9c 83       	std	Y+4, r25	; 0x04
    393a:	2d 83       	std	Y+5, r18	; 0x05
    393c:	3e 83       	std	Y+6, r19	; 0x06
    393e:	4f 83       	std	Y+7, r20	; 0x07
    3940:	58 87       	std	Y+8, r21	; 0x08
    3942:	89 e0       	ldi	r24, 0x09	; 9
    3944:	e8 2e       	mov	r14, r24
    3946:	f1 2c       	mov	r15, r1
    3948:	ec 0e       	add	r14, r28
    394a:	fd 1e       	adc	r15, r29
    394c:	ce 01       	movw	r24, r28
    394e:	01 96       	adiw	r24, 0x01	; 1
    3950:	b7 01       	movw	r22, r14
    3952:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    3956:	8e 01       	movw	r16, r28
    3958:	0f 5e       	subi	r16, 0xEF	; 239
    395a:	1f 4f       	sbci	r17, 0xFF	; 255
    395c:	ce 01       	movw	r24, r28
    395e:	05 96       	adiw	r24, 0x05	; 5
    3960:	b8 01       	movw	r22, r16
    3962:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    3966:	89 85       	ldd	r24, Y+9	; 0x09
    3968:	82 30       	cpi	r24, 0x02	; 2
    396a:	40 f0       	brcs	.+16     	; 0x397c <__ltsf2+0x56>
    396c:	89 89       	ldd	r24, Y+17	; 0x11
    396e:	82 30       	cpi	r24, 0x02	; 2
    3970:	28 f0       	brcs	.+10     	; 0x397c <__ltsf2+0x56>
    3972:	c7 01       	movw	r24, r14
    3974:	b8 01       	movw	r22, r16
    3976:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__fpcmp_parts_f>
    397a:	01 c0       	rjmp	.+2      	; 0x397e <__ltsf2+0x58>
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	68 96       	adiw	r28, 0x18	; 24
    3980:	e6 e0       	ldi	r30, 0x06	; 6
    3982:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__epilogue_restores__+0x18>

00003986 <__fixsfsi>:
    3986:	ac e0       	ldi	r26, 0x0C	; 12
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	e9 ec       	ldi	r30, 0xC9	; 201
    398c:	fc e1       	ldi	r31, 0x1C	; 28
    398e:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__prologue_saves__+0x20>
    3992:	69 83       	std	Y+1, r22	; 0x01
    3994:	7a 83       	std	Y+2, r23	; 0x02
    3996:	8b 83       	std	Y+3, r24	; 0x03
    3998:	9c 83       	std	Y+4, r25	; 0x04
    399a:	ce 01       	movw	r24, r28
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	be 01       	movw	r22, r28
    39a0:	6b 5f       	subi	r22, 0xFB	; 251
    39a2:	7f 4f       	sbci	r23, 0xFF	; 255
    39a4:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__unpack_f>
    39a8:	8d 81       	ldd	r24, Y+5	; 0x05
    39aa:	82 30       	cpi	r24, 0x02	; 2
    39ac:	61 f1       	breq	.+88     	; 0x3a06 <__fixsfsi+0x80>
    39ae:	82 30       	cpi	r24, 0x02	; 2
    39b0:	50 f1       	brcs	.+84     	; 0x3a06 <__fixsfsi+0x80>
    39b2:	84 30       	cpi	r24, 0x04	; 4
    39b4:	21 f4       	brne	.+8      	; 0x39be <__fixsfsi+0x38>
    39b6:	8e 81       	ldd	r24, Y+6	; 0x06
    39b8:	88 23       	and	r24, r24
    39ba:	51 f1       	breq	.+84     	; 0x3a10 <__fixsfsi+0x8a>
    39bc:	2e c0       	rjmp	.+92     	; 0x3a1a <__fixsfsi+0x94>
    39be:	2f 81       	ldd	r18, Y+7	; 0x07
    39c0:	38 85       	ldd	r19, Y+8	; 0x08
    39c2:	37 fd       	sbrc	r19, 7
    39c4:	20 c0       	rjmp	.+64     	; 0x3a06 <__fixsfsi+0x80>
    39c6:	6e 81       	ldd	r22, Y+6	; 0x06
    39c8:	2f 31       	cpi	r18, 0x1F	; 31
    39ca:	31 05       	cpc	r19, r1
    39cc:	1c f0       	brlt	.+6      	; 0x39d4 <__fixsfsi+0x4e>
    39ce:	66 23       	and	r22, r22
    39d0:	f9 f0       	breq	.+62     	; 0x3a10 <__fixsfsi+0x8a>
    39d2:	23 c0       	rjmp	.+70     	; 0x3a1a <__fixsfsi+0x94>
    39d4:	8e e1       	ldi	r24, 0x1E	; 30
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	82 1b       	sub	r24, r18
    39da:	93 0b       	sbc	r25, r19
    39dc:	29 85       	ldd	r18, Y+9	; 0x09
    39de:	3a 85       	ldd	r19, Y+10	; 0x0a
    39e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    39e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    39e4:	04 c0       	rjmp	.+8      	; 0x39ee <__fixsfsi+0x68>
    39e6:	56 95       	lsr	r21
    39e8:	47 95       	ror	r20
    39ea:	37 95       	ror	r19
    39ec:	27 95       	ror	r18
    39ee:	8a 95       	dec	r24
    39f0:	d2 f7       	brpl	.-12     	; 0x39e6 <__fixsfsi+0x60>
    39f2:	66 23       	and	r22, r22
    39f4:	b1 f0       	breq	.+44     	; 0x3a22 <__fixsfsi+0x9c>
    39f6:	50 95       	com	r21
    39f8:	40 95       	com	r20
    39fa:	30 95       	com	r19
    39fc:	21 95       	neg	r18
    39fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3a00:	4f 4f       	sbci	r20, 0xFF	; 255
    3a02:	5f 4f       	sbci	r21, 0xFF	; 255
    3a04:	0e c0       	rjmp	.+28     	; 0x3a22 <__fixsfsi+0x9c>
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	50 e0       	ldi	r21, 0x00	; 0
    3a0e:	09 c0       	rjmp	.+18     	; 0x3a22 <__fixsfsi+0x9c>
    3a10:	2f ef       	ldi	r18, 0xFF	; 255
    3a12:	3f ef       	ldi	r19, 0xFF	; 255
    3a14:	4f ef       	ldi	r20, 0xFF	; 255
    3a16:	5f e7       	ldi	r21, 0x7F	; 127
    3a18:	04 c0       	rjmp	.+8      	; 0x3a22 <__fixsfsi+0x9c>
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e0       	ldi	r20, 0x00	; 0
    3a20:	50 e8       	ldi	r21, 0x80	; 128
    3a22:	b9 01       	movw	r22, r18
    3a24:	ca 01       	movw	r24, r20
    3a26:	2c 96       	adiw	r28, 0x0c	; 12
    3a28:	e2 e0       	ldi	r30, 0x02	; 2
    3a2a:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__epilogue_restores__+0x20>

00003a2e <__floatunsisf>:
    3a2e:	a8 e0       	ldi	r26, 0x08	; 8
    3a30:	b0 e0       	ldi	r27, 0x00	; 0
    3a32:	ed e1       	ldi	r30, 0x1D	; 29
    3a34:	fd e1       	ldi	r31, 0x1D	; 29
    3a36:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__prologue_saves__+0x10>
    3a3a:	7b 01       	movw	r14, r22
    3a3c:	8c 01       	movw	r16, r24
    3a3e:	61 15       	cp	r22, r1
    3a40:	71 05       	cpc	r23, r1
    3a42:	81 05       	cpc	r24, r1
    3a44:	91 05       	cpc	r25, r1
    3a46:	19 f4       	brne	.+6      	; 0x3a4e <__floatunsisf+0x20>
    3a48:	82 e0       	ldi	r24, 0x02	; 2
    3a4a:	89 83       	std	Y+1, r24	; 0x01
    3a4c:	60 c0       	rjmp	.+192    	; 0x3b0e <__floatunsisf+0xe0>
    3a4e:	83 e0       	ldi	r24, 0x03	; 3
    3a50:	89 83       	std	Y+1, r24	; 0x01
    3a52:	8e e1       	ldi	r24, 0x1E	; 30
    3a54:	c8 2e       	mov	r12, r24
    3a56:	d1 2c       	mov	r13, r1
    3a58:	dc 82       	std	Y+4, r13	; 0x04
    3a5a:	cb 82       	std	Y+3, r12	; 0x03
    3a5c:	ed 82       	std	Y+5, r14	; 0x05
    3a5e:	fe 82       	std	Y+6, r15	; 0x06
    3a60:	0f 83       	std	Y+7, r16	; 0x07
    3a62:	18 87       	std	Y+8, r17	; 0x08
    3a64:	c8 01       	movw	r24, r16
    3a66:	b7 01       	movw	r22, r14
    3a68:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__clzsi2>
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	31 97       	sbiw	r30, 0x01	; 1
    3a70:	f7 ff       	sbrs	r31, 7
    3a72:	3b c0       	rjmp	.+118    	; 0x3aea <__floatunsisf+0xbc>
    3a74:	22 27       	eor	r18, r18
    3a76:	33 27       	eor	r19, r19
    3a78:	2e 1b       	sub	r18, r30
    3a7a:	3f 0b       	sbc	r19, r31
    3a7c:	57 01       	movw	r10, r14
    3a7e:	68 01       	movw	r12, r16
    3a80:	02 2e       	mov	r0, r18
    3a82:	04 c0       	rjmp	.+8      	; 0x3a8c <__floatunsisf+0x5e>
    3a84:	d6 94       	lsr	r13
    3a86:	c7 94       	ror	r12
    3a88:	b7 94       	ror	r11
    3a8a:	a7 94       	ror	r10
    3a8c:	0a 94       	dec	r0
    3a8e:	d2 f7       	brpl	.-12     	; 0x3a84 <__floatunsisf+0x56>
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	70 e0       	ldi	r23, 0x00	; 0
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	a0 e0       	ldi	r26, 0x00	; 0
    3a9e:	b0 e0       	ldi	r27, 0x00	; 0
    3aa0:	04 c0       	rjmp	.+8      	; 0x3aaa <__floatunsisf+0x7c>
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	aa 1f       	adc	r26, r26
    3aa8:	bb 1f       	adc	r27, r27
    3aaa:	2a 95       	dec	r18
    3aac:	d2 f7       	brpl	.-12     	; 0x3aa2 <__floatunsisf+0x74>
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	a1 09       	sbc	r26, r1
    3ab2:	b1 09       	sbc	r27, r1
    3ab4:	8e 21       	and	r24, r14
    3ab6:	9f 21       	and	r25, r15
    3ab8:	a0 23       	and	r26, r16
    3aba:	b1 23       	and	r27, r17
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	a1 05       	cpc	r26, r1
    3ac0:	b1 05       	cpc	r27, r1
    3ac2:	21 f0       	breq	.+8      	; 0x3acc <__floatunsisf+0x9e>
    3ac4:	41 e0       	ldi	r20, 0x01	; 1
    3ac6:	50 e0       	ldi	r21, 0x00	; 0
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	70 e0       	ldi	r23, 0x00	; 0
    3acc:	4a 29       	or	r20, r10
    3ace:	5b 29       	or	r21, r11
    3ad0:	6c 29       	or	r22, r12
    3ad2:	7d 29       	or	r23, r13
    3ad4:	4d 83       	std	Y+5, r20	; 0x05
    3ad6:	5e 83       	std	Y+6, r21	; 0x06
    3ad8:	6f 83       	std	Y+7, r22	; 0x07
    3ada:	78 87       	std	Y+8, r23	; 0x08
    3adc:	8e e1       	ldi	r24, 0x1E	; 30
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	8e 1b       	sub	r24, r30
    3ae2:	9f 0b       	sbc	r25, r31
    3ae4:	9c 83       	std	Y+4, r25	; 0x04
    3ae6:	8b 83       	std	Y+3, r24	; 0x03
    3ae8:	12 c0       	rjmp	.+36     	; 0x3b0e <__floatunsisf+0xe0>
    3aea:	30 97       	sbiw	r30, 0x00	; 0
    3aec:	81 f0       	breq	.+32     	; 0x3b0e <__floatunsisf+0xe0>
    3aee:	0e 2e       	mov	r0, r30
    3af0:	04 c0       	rjmp	.+8      	; 0x3afa <__floatunsisf+0xcc>
    3af2:	ee 0c       	add	r14, r14
    3af4:	ff 1c       	adc	r15, r15
    3af6:	00 1f       	adc	r16, r16
    3af8:	11 1f       	adc	r17, r17
    3afa:	0a 94       	dec	r0
    3afc:	d2 f7       	brpl	.-12     	; 0x3af2 <__floatunsisf+0xc4>
    3afe:	ed 82       	std	Y+5, r14	; 0x05
    3b00:	fe 82       	std	Y+6, r15	; 0x06
    3b02:	0f 83       	std	Y+7, r16	; 0x07
    3b04:	18 87       	std	Y+8, r17	; 0x08
    3b06:	ce 1a       	sub	r12, r30
    3b08:	df 0a       	sbc	r13, r31
    3b0a:	dc 82       	std	Y+4, r13	; 0x04
    3b0c:	cb 82       	std	Y+3, r12	; 0x03
    3b0e:	1a 82       	std	Y+2, r1	; 0x02
    3b10:	ce 01       	movw	r24, r28
    3b12:	01 96       	adiw	r24, 0x01	; 1
    3b14:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__pack_f>
    3b18:	28 96       	adiw	r28, 0x08	; 8
    3b1a:	ea e0       	ldi	r30, 0x0A	; 10
    3b1c:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__epilogue_restores__+0x10>

00003b20 <__clzsi2>:
    3b20:	ef 92       	push	r14
    3b22:	ff 92       	push	r15
    3b24:	0f 93       	push	r16
    3b26:	1f 93       	push	r17
    3b28:	7b 01       	movw	r14, r22
    3b2a:	8c 01       	movw	r16, r24
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	e8 16       	cp	r14, r24
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	f8 06       	cpc	r15, r24
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	08 07       	cpc	r16, r24
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	18 07       	cpc	r17, r24
    3b3c:	88 f4       	brcc	.+34     	; 0x3b60 <__clzsi2+0x40>
    3b3e:	8f ef       	ldi	r24, 0xFF	; 255
    3b40:	e8 16       	cp	r14, r24
    3b42:	f1 04       	cpc	r15, r1
    3b44:	01 05       	cpc	r16, r1
    3b46:	11 05       	cpc	r17, r1
    3b48:	31 f0       	breq	.+12     	; 0x3b56 <__clzsi2+0x36>
    3b4a:	28 f0       	brcs	.+10     	; 0x3b56 <__clzsi2+0x36>
    3b4c:	88 e0       	ldi	r24, 0x08	; 8
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	a0 e0       	ldi	r26, 0x00	; 0
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	17 c0       	rjmp	.+46     	; 0x3b84 <__clzsi2+0x64>
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	a0 e0       	ldi	r26, 0x00	; 0
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	12 c0       	rjmp	.+36     	; 0x3b84 <__clzsi2+0x64>
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	e8 16       	cp	r14, r24
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	f8 06       	cpc	r15, r24
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	08 07       	cpc	r16, r24
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	18 07       	cpc	r17, r24
    3b70:	28 f0       	brcs	.+10     	; 0x3b7c <__clzsi2+0x5c>
    3b72:	88 e1       	ldi	r24, 0x18	; 24
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	a0 e0       	ldi	r26, 0x00	; 0
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	04 c0       	rjmp	.+8      	; 0x3b84 <__clzsi2+0x64>
    3b7c:	80 e1       	ldi	r24, 0x10	; 16
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	a0 e0       	ldi	r26, 0x00	; 0
    3b82:	b0 e0       	ldi	r27, 0x00	; 0
    3b84:	20 e2       	ldi	r18, 0x20	; 32
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e0       	ldi	r20, 0x00	; 0
    3b8a:	50 e0       	ldi	r21, 0x00	; 0
    3b8c:	28 1b       	sub	r18, r24
    3b8e:	39 0b       	sbc	r19, r25
    3b90:	4a 0b       	sbc	r20, r26
    3b92:	5b 0b       	sbc	r21, r27
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <__clzsi2+0x7e>
    3b96:	16 95       	lsr	r17
    3b98:	07 95       	ror	r16
    3b9a:	f7 94       	ror	r15
    3b9c:	e7 94       	ror	r14
    3b9e:	8a 95       	dec	r24
    3ba0:	d2 f7       	brpl	.-12     	; 0x3b96 <__clzsi2+0x76>
    3ba2:	f7 01       	movw	r30, r14
    3ba4:	e8 5f       	subi	r30, 0xF8	; 248
    3ba6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ba8:	80 81       	ld	r24, Z
    3baa:	28 1b       	sub	r18, r24
    3bac:	31 09       	sbc	r19, r1
    3bae:	41 09       	sbc	r20, r1
    3bb0:	51 09       	sbc	r21, r1
    3bb2:	c9 01       	movw	r24, r18
    3bb4:	1f 91       	pop	r17
    3bb6:	0f 91       	pop	r16
    3bb8:	ff 90       	pop	r15
    3bba:	ef 90       	pop	r14
    3bbc:	08 95       	ret

00003bbe <__pack_f>:
    3bbe:	df 92       	push	r13
    3bc0:	ef 92       	push	r14
    3bc2:	ff 92       	push	r15
    3bc4:	0f 93       	push	r16
    3bc6:	1f 93       	push	r17
    3bc8:	fc 01       	movw	r30, r24
    3bca:	e4 80       	ldd	r14, Z+4	; 0x04
    3bcc:	f5 80       	ldd	r15, Z+5	; 0x05
    3bce:	06 81       	ldd	r16, Z+6	; 0x06
    3bd0:	17 81       	ldd	r17, Z+7	; 0x07
    3bd2:	d1 80       	ldd	r13, Z+1	; 0x01
    3bd4:	80 81       	ld	r24, Z
    3bd6:	82 30       	cpi	r24, 0x02	; 2
    3bd8:	48 f4       	brcc	.+18     	; 0x3bec <__pack_f+0x2e>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	a0 e1       	ldi	r26, 0x10	; 16
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	e8 2a       	or	r14, r24
    3be4:	f9 2a       	or	r15, r25
    3be6:	0a 2b       	or	r16, r26
    3be8:	1b 2b       	or	r17, r27
    3bea:	a5 c0       	rjmp	.+330    	; 0x3d36 <__pack_f+0x178>
    3bec:	84 30       	cpi	r24, 0x04	; 4
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <__pack_f+0x34>
    3bf0:	9f c0       	rjmp	.+318    	; 0x3d30 <__pack_f+0x172>
    3bf2:	82 30       	cpi	r24, 0x02	; 2
    3bf4:	21 f4       	brne	.+8      	; 0x3bfe <__pack_f+0x40>
    3bf6:	ee 24       	eor	r14, r14
    3bf8:	ff 24       	eor	r15, r15
    3bfa:	87 01       	movw	r16, r14
    3bfc:	05 c0       	rjmp	.+10     	; 0x3c08 <__pack_f+0x4a>
    3bfe:	e1 14       	cp	r14, r1
    3c00:	f1 04       	cpc	r15, r1
    3c02:	01 05       	cpc	r16, r1
    3c04:	11 05       	cpc	r17, r1
    3c06:	19 f4       	brne	.+6      	; 0x3c0e <__pack_f+0x50>
    3c08:	e0 e0       	ldi	r30, 0x00	; 0
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	96 c0       	rjmp	.+300    	; 0x3d3a <__pack_f+0x17c>
    3c0e:	62 81       	ldd	r22, Z+2	; 0x02
    3c10:	73 81       	ldd	r23, Z+3	; 0x03
    3c12:	9f ef       	ldi	r25, 0xFF	; 255
    3c14:	62 38       	cpi	r22, 0x82	; 130
    3c16:	79 07       	cpc	r23, r25
    3c18:	0c f0       	brlt	.+2      	; 0x3c1c <__pack_f+0x5e>
    3c1a:	5b c0       	rjmp	.+182    	; 0x3cd2 <__pack_f+0x114>
    3c1c:	22 e8       	ldi	r18, 0x82	; 130
    3c1e:	3f ef       	ldi	r19, 0xFF	; 255
    3c20:	26 1b       	sub	r18, r22
    3c22:	37 0b       	sbc	r19, r23
    3c24:	2a 31       	cpi	r18, 0x1A	; 26
    3c26:	31 05       	cpc	r19, r1
    3c28:	2c f0       	brlt	.+10     	; 0x3c34 <__pack_f+0x76>
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e0       	ldi	r20, 0x00	; 0
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	2a c0       	rjmp	.+84     	; 0x3c88 <__pack_f+0xca>
    3c34:	b8 01       	movw	r22, r16
    3c36:	a7 01       	movw	r20, r14
    3c38:	02 2e       	mov	r0, r18
    3c3a:	04 c0       	rjmp	.+8      	; 0x3c44 <__pack_f+0x86>
    3c3c:	76 95       	lsr	r23
    3c3e:	67 95       	ror	r22
    3c40:	57 95       	ror	r21
    3c42:	47 95       	ror	r20
    3c44:	0a 94       	dec	r0
    3c46:	d2 f7       	brpl	.-12     	; 0x3c3c <__pack_f+0x7e>
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	a0 e0       	ldi	r26, 0x00	; 0
    3c4e:	b0 e0       	ldi	r27, 0x00	; 0
    3c50:	04 c0       	rjmp	.+8      	; 0x3c5a <__pack_f+0x9c>
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	aa 1f       	adc	r26, r26
    3c58:	bb 1f       	adc	r27, r27
    3c5a:	2a 95       	dec	r18
    3c5c:	d2 f7       	brpl	.-12     	; 0x3c52 <__pack_f+0x94>
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	a1 09       	sbc	r26, r1
    3c62:	b1 09       	sbc	r27, r1
    3c64:	8e 21       	and	r24, r14
    3c66:	9f 21       	and	r25, r15
    3c68:	a0 23       	and	r26, r16
    3c6a:	b1 23       	and	r27, r17
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	a1 05       	cpc	r26, r1
    3c70:	b1 05       	cpc	r27, r1
    3c72:	21 f0       	breq	.+8      	; 0x3c7c <__pack_f+0xbe>
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	a0 e0       	ldi	r26, 0x00	; 0
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	9a 01       	movw	r18, r20
    3c7e:	ab 01       	movw	r20, r22
    3c80:	28 2b       	or	r18, r24
    3c82:	39 2b       	or	r19, r25
    3c84:	4a 2b       	or	r20, r26
    3c86:	5b 2b       	or	r21, r27
    3c88:	da 01       	movw	r26, r20
    3c8a:	c9 01       	movw	r24, r18
    3c8c:	8f 77       	andi	r24, 0x7F	; 127
    3c8e:	90 70       	andi	r25, 0x00	; 0
    3c90:	a0 70       	andi	r26, 0x00	; 0
    3c92:	b0 70       	andi	r27, 0x00	; 0
    3c94:	80 34       	cpi	r24, 0x40	; 64
    3c96:	91 05       	cpc	r25, r1
    3c98:	a1 05       	cpc	r26, r1
    3c9a:	b1 05       	cpc	r27, r1
    3c9c:	39 f4       	brne	.+14     	; 0x3cac <__pack_f+0xee>
    3c9e:	27 ff       	sbrs	r18, 7
    3ca0:	09 c0       	rjmp	.+18     	; 0x3cb4 <__pack_f+0xf6>
    3ca2:	20 5c       	subi	r18, 0xC0	; 192
    3ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca6:	4f 4f       	sbci	r20, 0xFF	; 255
    3ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    3caa:	04 c0       	rjmp	.+8      	; 0x3cb4 <__pack_f+0xf6>
    3cac:	21 5c       	subi	r18, 0xC1	; 193
    3cae:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb0:	4f 4f       	sbci	r20, 0xFF	; 255
    3cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb4:	e0 e0       	ldi	r30, 0x00	; 0
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	20 30       	cpi	r18, 0x00	; 0
    3cba:	a0 e0       	ldi	r26, 0x00	; 0
    3cbc:	3a 07       	cpc	r19, r26
    3cbe:	a0 e0       	ldi	r26, 0x00	; 0
    3cc0:	4a 07       	cpc	r20, r26
    3cc2:	a0 e4       	ldi	r26, 0x40	; 64
    3cc4:	5a 07       	cpc	r21, r26
    3cc6:	10 f0       	brcs	.+4      	; 0x3ccc <__pack_f+0x10e>
    3cc8:	e1 e0       	ldi	r30, 0x01	; 1
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	79 01       	movw	r14, r18
    3cce:	8a 01       	movw	r16, r20
    3cd0:	27 c0       	rjmp	.+78     	; 0x3d20 <__pack_f+0x162>
    3cd2:	60 38       	cpi	r22, 0x80	; 128
    3cd4:	71 05       	cpc	r23, r1
    3cd6:	64 f5       	brge	.+88     	; 0x3d30 <__pack_f+0x172>
    3cd8:	fb 01       	movw	r30, r22
    3cda:	e1 58       	subi	r30, 0x81	; 129
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	d8 01       	movw	r26, r16
    3ce0:	c7 01       	movw	r24, r14
    3ce2:	8f 77       	andi	r24, 0x7F	; 127
    3ce4:	90 70       	andi	r25, 0x00	; 0
    3ce6:	a0 70       	andi	r26, 0x00	; 0
    3ce8:	b0 70       	andi	r27, 0x00	; 0
    3cea:	80 34       	cpi	r24, 0x40	; 64
    3cec:	91 05       	cpc	r25, r1
    3cee:	a1 05       	cpc	r26, r1
    3cf0:	b1 05       	cpc	r27, r1
    3cf2:	39 f4       	brne	.+14     	; 0x3d02 <__pack_f+0x144>
    3cf4:	e7 fe       	sbrs	r14, 7
    3cf6:	0d c0       	rjmp	.+26     	; 0x3d12 <__pack_f+0x154>
    3cf8:	80 e4       	ldi	r24, 0x40	; 64
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	a0 e0       	ldi	r26, 0x00	; 0
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	04 c0       	rjmp	.+8      	; 0x3d0a <__pack_f+0x14c>
    3d02:	8f e3       	ldi	r24, 0x3F	; 63
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	a0 e0       	ldi	r26, 0x00	; 0
    3d08:	b0 e0       	ldi	r27, 0x00	; 0
    3d0a:	e8 0e       	add	r14, r24
    3d0c:	f9 1e       	adc	r15, r25
    3d0e:	0a 1f       	adc	r16, r26
    3d10:	1b 1f       	adc	r17, r27
    3d12:	17 ff       	sbrs	r17, 7
    3d14:	05 c0       	rjmp	.+10     	; 0x3d20 <__pack_f+0x162>
    3d16:	16 95       	lsr	r17
    3d18:	07 95       	ror	r16
    3d1a:	f7 94       	ror	r15
    3d1c:	e7 94       	ror	r14
    3d1e:	31 96       	adiw	r30, 0x01	; 1
    3d20:	87 e0       	ldi	r24, 0x07	; 7
    3d22:	16 95       	lsr	r17
    3d24:	07 95       	ror	r16
    3d26:	f7 94       	ror	r15
    3d28:	e7 94       	ror	r14
    3d2a:	8a 95       	dec	r24
    3d2c:	d1 f7       	brne	.-12     	; 0x3d22 <__pack_f+0x164>
    3d2e:	05 c0       	rjmp	.+10     	; 0x3d3a <__pack_f+0x17c>
    3d30:	ee 24       	eor	r14, r14
    3d32:	ff 24       	eor	r15, r15
    3d34:	87 01       	movw	r16, r14
    3d36:	ef ef       	ldi	r30, 0xFF	; 255
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	6e 2f       	mov	r22, r30
    3d3c:	67 95       	ror	r22
    3d3e:	66 27       	eor	r22, r22
    3d40:	67 95       	ror	r22
    3d42:	90 2f       	mov	r25, r16
    3d44:	9f 77       	andi	r25, 0x7F	; 127
    3d46:	d7 94       	ror	r13
    3d48:	dd 24       	eor	r13, r13
    3d4a:	d7 94       	ror	r13
    3d4c:	8e 2f       	mov	r24, r30
    3d4e:	86 95       	lsr	r24
    3d50:	49 2f       	mov	r20, r25
    3d52:	46 2b       	or	r20, r22
    3d54:	58 2f       	mov	r21, r24
    3d56:	5d 29       	or	r21, r13
    3d58:	b7 01       	movw	r22, r14
    3d5a:	ca 01       	movw	r24, r20
    3d5c:	1f 91       	pop	r17
    3d5e:	0f 91       	pop	r16
    3d60:	ff 90       	pop	r15
    3d62:	ef 90       	pop	r14
    3d64:	df 90       	pop	r13
    3d66:	08 95       	ret

00003d68 <__unpack_f>:
    3d68:	fc 01       	movw	r30, r24
    3d6a:	db 01       	movw	r26, r22
    3d6c:	40 81       	ld	r20, Z
    3d6e:	51 81       	ldd	r21, Z+1	; 0x01
    3d70:	22 81       	ldd	r18, Z+2	; 0x02
    3d72:	62 2f       	mov	r22, r18
    3d74:	6f 77       	andi	r22, 0x7F	; 127
    3d76:	70 e0       	ldi	r23, 0x00	; 0
    3d78:	22 1f       	adc	r18, r18
    3d7a:	22 27       	eor	r18, r18
    3d7c:	22 1f       	adc	r18, r18
    3d7e:	93 81       	ldd	r25, Z+3	; 0x03
    3d80:	89 2f       	mov	r24, r25
    3d82:	88 0f       	add	r24, r24
    3d84:	82 2b       	or	r24, r18
    3d86:	28 2f       	mov	r18, r24
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	99 1f       	adc	r25, r25
    3d8c:	99 27       	eor	r25, r25
    3d8e:	99 1f       	adc	r25, r25
    3d90:	11 96       	adiw	r26, 0x01	; 1
    3d92:	9c 93       	st	X, r25
    3d94:	11 97       	sbiw	r26, 0x01	; 1
    3d96:	21 15       	cp	r18, r1
    3d98:	31 05       	cpc	r19, r1
    3d9a:	a9 f5       	brne	.+106    	; 0x3e06 <__unpack_f+0x9e>
    3d9c:	41 15       	cp	r20, r1
    3d9e:	51 05       	cpc	r21, r1
    3da0:	61 05       	cpc	r22, r1
    3da2:	71 05       	cpc	r23, r1
    3da4:	11 f4       	brne	.+4      	; 0x3daa <__unpack_f+0x42>
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	37 c0       	rjmp	.+110    	; 0x3e18 <__unpack_f+0xb0>
    3daa:	82 e8       	ldi	r24, 0x82	; 130
    3dac:	9f ef       	ldi	r25, 0xFF	; 255
    3dae:	13 96       	adiw	r26, 0x03	; 3
    3db0:	9c 93       	st	X, r25
    3db2:	8e 93       	st	-X, r24
    3db4:	12 97       	sbiw	r26, 0x02	; 2
    3db6:	9a 01       	movw	r18, r20
    3db8:	ab 01       	movw	r20, r22
    3dba:	67 e0       	ldi	r22, 0x07	; 7
    3dbc:	22 0f       	add	r18, r18
    3dbe:	33 1f       	adc	r19, r19
    3dc0:	44 1f       	adc	r20, r20
    3dc2:	55 1f       	adc	r21, r21
    3dc4:	6a 95       	dec	r22
    3dc6:	d1 f7       	brne	.-12     	; 0x3dbc <__unpack_f+0x54>
    3dc8:	83 e0       	ldi	r24, 0x03	; 3
    3dca:	8c 93       	st	X, r24
    3dcc:	0d c0       	rjmp	.+26     	; 0x3de8 <__unpack_f+0x80>
    3dce:	22 0f       	add	r18, r18
    3dd0:	33 1f       	adc	r19, r19
    3dd2:	44 1f       	adc	r20, r20
    3dd4:	55 1f       	adc	r21, r21
    3dd6:	12 96       	adiw	r26, 0x02	; 2
    3dd8:	8d 91       	ld	r24, X+
    3dda:	9c 91       	ld	r25, X
    3ddc:	13 97       	sbiw	r26, 0x03	; 3
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	13 96       	adiw	r26, 0x03	; 3
    3de2:	9c 93       	st	X, r25
    3de4:	8e 93       	st	-X, r24
    3de6:	12 97       	sbiw	r26, 0x02	; 2
    3de8:	20 30       	cpi	r18, 0x00	; 0
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	38 07       	cpc	r19, r24
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	48 07       	cpc	r20, r24
    3df2:	80 e4       	ldi	r24, 0x40	; 64
    3df4:	58 07       	cpc	r21, r24
    3df6:	58 f3       	brcs	.-42     	; 0x3dce <__unpack_f+0x66>
    3df8:	14 96       	adiw	r26, 0x04	; 4
    3dfa:	2d 93       	st	X+, r18
    3dfc:	3d 93       	st	X+, r19
    3dfe:	4d 93       	st	X+, r20
    3e00:	5c 93       	st	X, r21
    3e02:	17 97       	sbiw	r26, 0x07	; 7
    3e04:	08 95       	ret
    3e06:	2f 3f       	cpi	r18, 0xFF	; 255
    3e08:	31 05       	cpc	r19, r1
    3e0a:	79 f4       	brne	.+30     	; 0x3e2a <__unpack_f+0xc2>
    3e0c:	41 15       	cp	r20, r1
    3e0e:	51 05       	cpc	r21, r1
    3e10:	61 05       	cpc	r22, r1
    3e12:	71 05       	cpc	r23, r1
    3e14:	19 f4       	brne	.+6      	; 0x3e1c <__unpack_f+0xb4>
    3e16:	84 e0       	ldi	r24, 0x04	; 4
    3e18:	8c 93       	st	X, r24
    3e1a:	08 95       	ret
    3e1c:	64 ff       	sbrs	r22, 4
    3e1e:	03 c0       	rjmp	.+6      	; 0x3e26 <__unpack_f+0xbe>
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	8c 93       	st	X, r24
    3e24:	12 c0       	rjmp	.+36     	; 0x3e4a <__unpack_f+0xe2>
    3e26:	1c 92       	st	X, r1
    3e28:	10 c0       	rjmp	.+32     	; 0x3e4a <__unpack_f+0xe2>
    3e2a:	2f 57       	subi	r18, 0x7F	; 127
    3e2c:	30 40       	sbci	r19, 0x00	; 0
    3e2e:	13 96       	adiw	r26, 0x03	; 3
    3e30:	3c 93       	st	X, r19
    3e32:	2e 93       	st	-X, r18
    3e34:	12 97       	sbiw	r26, 0x02	; 2
    3e36:	83 e0       	ldi	r24, 0x03	; 3
    3e38:	8c 93       	st	X, r24
    3e3a:	87 e0       	ldi	r24, 0x07	; 7
    3e3c:	44 0f       	add	r20, r20
    3e3e:	55 1f       	adc	r21, r21
    3e40:	66 1f       	adc	r22, r22
    3e42:	77 1f       	adc	r23, r23
    3e44:	8a 95       	dec	r24
    3e46:	d1 f7       	brne	.-12     	; 0x3e3c <__unpack_f+0xd4>
    3e48:	70 64       	ori	r23, 0x40	; 64
    3e4a:	14 96       	adiw	r26, 0x04	; 4
    3e4c:	4d 93       	st	X+, r20
    3e4e:	5d 93       	st	X+, r21
    3e50:	6d 93       	st	X+, r22
    3e52:	7c 93       	st	X, r23
    3e54:	17 97       	sbiw	r26, 0x07	; 7
    3e56:	08 95       	ret

00003e58 <__fpcmp_parts_f>:
    3e58:	1f 93       	push	r17
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	fb 01       	movw	r30, r22
    3e5e:	9c 91       	ld	r25, X
    3e60:	92 30       	cpi	r25, 0x02	; 2
    3e62:	08 f4       	brcc	.+2      	; 0x3e66 <__fpcmp_parts_f+0xe>
    3e64:	47 c0       	rjmp	.+142    	; 0x3ef4 <__fpcmp_parts_f+0x9c>
    3e66:	80 81       	ld	r24, Z
    3e68:	82 30       	cpi	r24, 0x02	; 2
    3e6a:	08 f4       	brcc	.+2      	; 0x3e6e <__fpcmp_parts_f+0x16>
    3e6c:	43 c0       	rjmp	.+134    	; 0x3ef4 <__fpcmp_parts_f+0x9c>
    3e6e:	94 30       	cpi	r25, 0x04	; 4
    3e70:	51 f4       	brne	.+20     	; 0x3e86 <__fpcmp_parts_f+0x2e>
    3e72:	11 96       	adiw	r26, 0x01	; 1
    3e74:	1c 91       	ld	r17, X
    3e76:	84 30       	cpi	r24, 0x04	; 4
    3e78:	99 f5       	brne	.+102    	; 0x3ee0 <__fpcmp_parts_f+0x88>
    3e7a:	81 81       	ldd	r24, Z+1	; 0x01
    3e7c:	68 2f       	mov	r22, r24
    3e7e:	70 e0       	ldi	r23, 0x00	; 0
    3e80:	61 1b       	sub	r22, r17
    3e82:	71 09       	sbc	r23, r1
    3e84:	3f c0       	rjmp	.+126    	; 0x3f04 <__fpcmp_parts_f+0xac>
    3e86:	84 30       	cpi	r24, 0x04	; 4
    3e88:	21 f0       	breq	.+8      	; 0x3e92 <__fpcmp_parts_f+0x3a>
    3e8a:	92 30       	cpi	r25, 0x02	; 2
    3e8c:	31 f4       	brne	.+12     	; 0x3e9a <__fpcmp_parts_f+0x42>
    3e8e:	82 30       	cpi	r24, 0x02	; 2
    3e90:	b9 f1       	breq	.+110    	; 0x3f00 <__fpcmp_parts_f+0xa8>
    3e92:	81 81       	ldd	r24, Z+1	; 0x01
    3e94:	88 23       	and	r24, r24
    3e96:	89 f1       	breq	.+98     	; 0x3efa <__fpcmp_parts_f+0xa2>
    3e98:	2d c0       	rjmp	.+90     	; 0x3ef4 <__fpcmp_parts_f+0x9c>
    3e9a:	11 96       	adiw	r26, 0x01	; 1
    3e9c:	1c 91       	ld	r17, X
    3e9e:	11 97       	sbiw	r26, 0x01	; 1
    3ea0:	82 30       	cpi	r24, 0x02	; 2
    3ea2:	f1 f0       	breq	.+60     	; 0x3ee0 <__fpcmp_parts_f+0x88>
    3ea4:	81 81       	ldd	r24, Z+1	; 0x01
    3ea6:	18 17       	cp	r17, r24
    3ea8:	d9 f4       	brne	.+54     	; 0x3ee0 <__fpcmp_parts_f+0x88>
    3eaa:	12 96       	adiw	r26, 0x02	; 2
    3eac:	2d 91       	ld	r18, X+
    3eae:	3c 91       	ld	r19, X
    3eb0:	13 97       	sbiw	r26, 0x03	; 3
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	82 17       	cp	r24, r18
    3eb8:	93 07       	cpc	r25, r19
    3eba:	94 f0       	brlt	.+36     	; 0x3ee0 <__fpcmp_parts_f+0x88>
    3ebc:	28 17       	cp	r18, r24
    3ebe:	39 07       	cpc	r19, r25
    3ec0:	bc f0       	brlt	.+46     	; 0x3ef0 <__fpcmp_parts_f+0x98>
    3ec2:	14 96       	adiw	r26, 0x04	; 4
    3ec4:	8d 91       	ld	r24, X+
    3ec6:	9d 91       	ld	r25, X+
    3ec8:	0d 90       	ld	r0, X+
    3eca:	bc 91       	ld	r27, X
    3ecc:	a0 2d       	mov	r26, r0
    3ece:	24 81       	ldd	r18, Z+4	; 0x04
    3ed0:	35 81       	ldd	r19, Z+5	; 0x05
    3ed2:	46 81       	ldd	r20, Z+6	; 0x06
    3ed4:	57 81       	ldd	r21, Z+7	; 0x07
    3ed6:	28 17       	cp	r18, r24
    3ed8:	39 07       	cpc	r19, r25
    3eda:	4a 07       	cpc	r20, r26
    3edc:	5b 07       	cpc	r21, r27
    3ede:	18 f4       	brcc	.+6      	; 0x3ee6 <__fpcmp_parts_f+0x8e>
    3ee0:	11 23       	and	r17, r17
    3ee2:	41 f0       	breq	.+16     	; 0x3ef4 <__fpcmp_parts_f+0x9c>
    3ee4:	0a c0       	rjmp	.+20     	; 0x3efa <__fpcmp_parts_f+0xa2>
    3ee6:	82 17       	cp	r24, r18
    3ee8:	93 07       	cpc	r25, r19
    3eea:	a4 07       	cpc	r26, r20
    3eec:	b5 07       	cpc	r27, r21
    3eee:	40 f4       	brcc	.+16     	; 0x3f00 <__fpcmp_parts_f+0xa8>
    3ef0:	11 23       	and	r17, r17
    3ef2:	19 f0       	breq	.+6      	; 0x3efa <__fpcmp_parts_f+0xa2>
    3ef4:	61 e0       	ldi	r22, 0x01	; 1
    3ef6:	70 e0       	ldi	r23, 0x00	; 0
    3ef8:	05 c0       	rjmp	.+10     	; 0x3f04 <__fpcmp_parts_f+0xac>
    3efa:	6f ef       	ldi	r22, 0xFF	; 255
    3efc:	7f ef       	ldi	r23, 0xFF	; 255
    3efe:	02 c0       	rjmp	.+4      	; 0x3f04 <__fpcmp_parts_f+0xac>
    3f00:	60 e0       	ldi	r22, 0x00	; 0
    3f02:	70 e0       	ldi	r23, 0x00	; 0
    3f04:	cb 01       	movw	r24, r22
    3f06:	1f 91       	pop	r17
    3f08:	08 95       	ret

00003f0a <__udivmodhi4>:
    3f0a:	aa 1b       	sub	r26, r26
    3f0c:	bb 1b       	sub	r27, r27
    3f0e:	51 e1       	ldi	r21, 0x11	; 17
    3f10:	07 c0       	rjmp	.+14     	; 0x3f20 <__udivmodhi4_ep>

00003f12 <__udivmodhi4_loop>:
    3f12:	aa 1f       	adc	r26, r26
    3f14:	bb 1f       	adc	r27, r27
    3f16:	a6 17       	cp	r26, r22
    3f18:	b7 07       	cpc	r27, r23
    3f1a:	10 f0       	brcs	.+4      	; 0x3f20 <__udivmodhi4_ep>
    3f1c:	a6 1b       	sub	r26, r22
    3f1e:	b7 0b       	sbc	r27, r23

00003f20 <__udivmodhi4_ep>:
    3f20:	88 1f       	adc	r24, r24
    3f22:	99 1f       	adc	r25, r25
    3f24:	5a 95       	dec	r21
    3f26:	a9 f7       	brne	.-22     	; 0x3f12 <__udivmodhi4_loop>
    3f28:	80 95       	com	r24
    3f2a:	90 95       	com	r25
    3f2c:	bc 01       	movw	r22, r24
    3f2e:	cd 01       	movw	r24, r26
    3f30:	08 95       	ret

00003f32 <__prologue_saves__>:
    3f32:	2f 92       	push	r2
    3f34:	3f 92       	push	r3
    3f36:	4f 92       	push	r4
    3f38:	5f 92       	push	r5
    3f3a:	6f 92       	push	r6
    3f3c:	7f 92       	push	r7
    3f3e:	8f 92       	push	r8
    3f40:	9f 92       	push	r9
    3f42:	af 92       	push	r10
    3f44:	bf 92       	push	r11
    3f46:	cf 92       	push	r12
    3f48:	df 92       	push	r13
    3f4a:	ef 92       	push	r14
    3f4c:	ff 92       	push	r15
    3f4e:	0f 93       	push	r16
    3f50:	1f 93       	push	r17
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
    3f5a:	ca 1b       	sub	r28, r26
    3f5c:	db 0b       	sbc	r29, r27
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	19 94       	eijmp

00003f6a <__epilogue_restores__>:
    3f6a:	2a 88       	ldd	r2, Y+18	; 0x12
    3f6c:	39 88       	ldd	r3, Y+17	; 0x11
    3f6e:	48 88       	ldd	r4, Y+16	; 0x10
    3f70:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f72:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f74:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f76:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f78:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f7c:	b9 84       	ldd	r11, Y+9	; 0x09
    3f7e:	c8 84       	ldd	r12, Y+8	; 0x08
    3f80:	df 80       	ldd	r13, Y+7	; 0x07
    3f82:	ee 80       	ldd	r14, Y+6	; 0x06
    3f84:	fd 80       	ldd	r15, Y+5	; 0x05
    3f86:	0c 81       	ldd	r16, Y+4	; 0x04
    3f88:	1b 81       	ldd	r17, Y+3	; 0x03
    3f8a:	aa 81       	ldd	r26, Y+2	; 0x02
    3f8c:	b9 81       	ldd	r27, Y+1	; 0x01
    3f8e:	ce 0f       	add	r28, r30
    3f90:	d1 1d       	adc	r29, r1
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	de bf       	out	0x3e, r29	; 62
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	ed 01       	movw	r28, r26
    3f9e:	08 95       	ret

00003fa0 <_exit>:
    3fa0:	f8 94       	cli

00003fa2 <__stop_program>:
    3fa2:	ff cf       	rjmp	.-2      	; 0x3fa2 <__stop_program>
